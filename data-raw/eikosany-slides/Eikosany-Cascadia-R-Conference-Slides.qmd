---
title: "Eikosany: Microtonal Algorithmic Composition with R"
author: "M. Edward (Ed) Borasky"
date: "2023-08-19"
bibliography: REFERENCES.bib
format: 
  revealjs:
    theme: dark
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

```

# 1 Algorithmic Composition

## Overview of Methods [@nierhaus2009algorithmic]

-   Markov Models / Stochastic
-   Generative Grammars
-   Transition Networks
-   Chaos and Self-Similarity
-   Genetic Algorithms
-   Cellular Automata
-   Artificial Neural Networks

## My Main Focus

-   Markov Models / Stochastic
    -   Pioneered by Iannis Xenakis [@xenakis1992formalized]
    -   [for example, @Borasky2021a; @partch1979genesis - random
    walk on Harry Partch 11-limit tonality diamond]

# 2 Musical Scales

## Types of scales

-   Standard "western" tuning - 12 equally-spaced tones / octave
    -   abbreviated 12-TET or 12-EDO
-   Alternative tuning - anything else

## Alternative scales
-   scales from other cultures
-   "just" scales - scales based on rational numbers
-   scale periods different from the octave
-   scale period divided into more than 12 tones
-   combinations of the above!

## Microtonal music

-   Usually defined as an octave divided into more than 12 tones
-   Common microtonal scales
    -   19-TET
    -   24-TET aka quarter tones
    -   31-TET

# 3 Erv Wilson [@narushima2019microtonality]

## Ervin Wilson (June 11, 1928 â€“ December 8, 2016)
- Mexican/American (dual citizen)
- Prolific music theorist
- Developed keyboard layouts, scales and lattices
- Primarily known for microtonal just scales

## Combination Product Sets {.smaller}
- Focus of the `eikosany` package
- Start with a set of _harmonic factors_
- Take all the combinations of the factors with `N` elements
    - Pascal's Triangle is your friend
- Take the products of the combinations
- Reduce the products to ratios in [1, 2)
    1. Divide all by smallest product
    2. Multiply or divide by powers of two to get values in [1, 2)
- Sort

## Example: 1-3-5-7 Hexany
- Products of combinations: `1*3, 1*5, 1*7, 3*5, 3*7, 5*7`
- Raw ratios (divide by smallest product): `1 5/3 7/3 5 7 35/3`
- Reduce: `1 5/3 7/6 5/4 7/4 35/24`
- Sort: `1 7/6 5/4 35/24 5/3 7/4`

## Using the package!
```{r}
remotes::install_github("AlgoCompSynth/eikosany", quiet = TRUE)
library(eikosany)
hexany <- cps_scale_table(
  harmonics = c(1, 3, 5, 7),
  choose = 2
)
print(hexany)

```

- The prime on the bottom row indicates the next octave

# 4 Pseudo-Demo

## The 1-3-5-7-9-11 Eikosany
- Six harmonic factors, choose 3
```{r}
eikosany_scale_table <- cps_scale_table(
  harmonics = c(1, 3, 5, 7, 9, 11),
  choose = 3
)

```

## The Scale Table is a `data.table`! {.smaller}

```{r}
library(data.table)
print(eikosany_scale_table)

```

## What Does It Sound Like?
- To hear the scale:
    1. Get a synthesizer
    2. Map the keys of the synthesizer to the notes of the scale
    3. Play the keys
- But that's kind of expensive and I'm in a hurry
- So I'll emulate it in R!

## First Step - Make a Keyboard Map
- Maps MIDI note numbers to frequencies
- MIDI note number 60 is middle C
- Our 20-note scale is note numbers 60:80
- Keyboard maps are also data.tables
```{r}
# this is the whole keyboard
eikosany_map <- keyboard_map(eikosany_scale_table)

# extract scale from middle C
scale_map <- eikosany_map[
  note_number %in% 60:80,
  list(note_number, freq)
]

```
## The Scale Map {.smaller}
```{r}
print(scale_map)

```

## Second Step - Make Waves!
- uses `seewave` and `tuneR` [@sueur2018sound]
- creates a _multisample_ - a collection of `WAV` files
    - can be used in sample-based workflows
    - emulates multisamples captured by [1010music
    Blackbox](https://1010music.com/product/blackbox)

## Make Waves!
```{r}
scale_sawtooth_multisample(
  keyboard_map = scale_map,
  start_note_number = 60,
  end_note_number = 80,
  duration_sec = 2,
  output_directory = "~/Eikosany-Scale-Multisample"
)

```

## Play Files with a Media Player
- 40 seconds you'll never get back

# 5 Roadmap

## Current status
- Enough infrastructure to manually make music!
    - (which was my initial goal)
- Documentation - you're looking at it

## Current plan
1. Clean up documentation and do a first release (August)
    - Hoping to release an album / EP on Bandcamp
2. Open feature requests for triage
3. Add consonance analysis capability [@sethares2013tuning]

# Appendix - Microtonal Music Resources

## PC / Mac / iOS Software {.smaller}

- [Scala](https://www.huygens-fokker.org/scala/). Note: this is
***not*** the Scala multi-paradigm programming language that runs
on the Java Virtual Machine. This is a specialized tool for
working with musical scales.

- [ODDSound MTS-ESP](https://oddsound.com/mtsespsuite.php).
This is a plugin for digital audio workstations (DAWs) that
facilitates production of microtonal music. I own a copy and if
you're making microtonal electronic music, you should too. The
Eikosany and other scales Erv Wilson developed all ship with
MTS-ESP, so you don't really need my R package to compose with
them.

- [Entonal Studio](https://entonal.studio/). Entonal Studio is a
user interface package for microtonal composition. It can operate
as a standalone application, a plugin host or a plugin. I own a
copy of Entonal Studio and recommend it highly.

## PC / Mac / iOS Software (continued) {.smaller}

- [Infinitone DMT](https://infinitone.com/). From the [Infinitone
DMT FAQ](https://infinitone.com/support/#faq-container):

"Infinitone DMT is a DAW plugin and standalone that empowers
musicians to easily use micro-tuning within their own workflow.

...

 "As a plugin, Infinitone DMT is inserted in your DAW as a MIDI
 effect.

...

"The standalone can be used separately from a DAW, or it can be
used in conjunction with a DAW by routing MIDI data from the DAW
to the standalone (and back)."

## PC / Mac / iOS Software (continued) {.smaller}

- [Universal Tuning Editor](https://hpi.zentral.zone/ute).
Universal Tuning Editor is an application for computing and
visualizing microtonal scales and tunings, and includes tools to
interface with hardware and software synthesizers.

- [Wilsonic](https://apps.apple.com/us/app/wilsonic/id848852071).
This is a free app that runs on iOS devices. I don't have any iOS
devices so I've never used this.

    There is also a version of Wilsonic in development for use
    with ODDSound MTS-ESP. See
    <https://wilsonic.co/downloads/downloads-mts-esp/> for the
    details.

- [Surge XT](https://surge-synthesizer.github.io/). Surge XT is
an open source full featured software synthesizer. The Surge XT
community has invested a significant level of effort into
supporting alternate tuning systems.

See the [Xenharmonic Wiki List of microtonal software
plugins](https://en.xen.wiki/w/List_of_microtonal_software_plugins)
for more ways of making microtonal music.    

## Websites

- [Kraig Grady's Anaphoria Wilson
Archive](https://anaphoria.com/wilson.html) Australian-American
composer Kraig Grady studied with Erv Wilson for many years and
has collected Wilson's writings.

- [Sevish's Scale
Workshop](https://sevish.com/scaleworkshop/guide.htm).
This is a web-based tool for working with musical scales.

- [Leimma and Apotome](https://isartum.net/). These tools, by
[Khyam Allami](https://khyamallami.com/) and
[Counterpoint](https://ctpt.co/), are browser-based applications
for creating microtonal scales and making generative music with
them.

## YouTube Playlists
- [Surfing the Sonic
Sky](https://youtube.com/@SurfingTheSonicSky) 
- [Combination Product Sets -
Music](https://youtube.com/playlist?list=PLGT-itRivwZWAb84lXEaNmlEVOimTo9zT)
- [Combination Product Sets -
Theory](https://youtube.com/playlist?list=PLGT-itRivwZUjMKWL8UMb0vi8WT_UjcvC)

# References
