[{"path":"/articles/constructing-the-eikosany.html","id":"scale_table-examples","dir":"Articles","previous_headings":"","what":"scale_table examples","title":"Constructing the Eikosany","text":"","code":"# the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- scale_table()) #>     product    ratio ratio_frac ratio_cents degree #>  1:   1x3x5 1.000000          1     0.00000      0 #>  2:  5x9x11 1.031250      33/32    53.27294      1 #>  3:   1x7x9 1.050000      21/20    84.46719      2 #>  4:  1x3x11 1.100000      11/10   165.00423      3 #>  5:   3x5x9 1.125000        9/8   203.91000      4 #>  6:   1x5x7 1.166667        7/6   266.87091      5 #>  7:  3x9x11 1.237500      99/80   368.91423      6 #>  8:  1x7x11 1.283333      77/60   431.87513      7 #>  9:   5x7x9 1.312500      21/16   470.78091      8 #> 10:  3x5x11 1.375000       11/8   551.31794      9 #> 11:   1x3x7 1.400000        7/5   582.51219     10 #> 12:  7x9x11 1.443750    231/160   635.78514     11 #> 13:   1x5x9 1.500000        3/2   701.95500     12 #> 14:   3x7x9 1.575000      63/40   786.42219     13 #> 15:  5x7x11 1.604167      77/48   818.18885     14 #> 16:  1x9x11 1.650000      33/20   866.95923     15 #> 17:   3x5x7 1.750000        7/4   968.82591     16 #> 18:   1x3x9 1.800000        9/5  1017.59629     17 #> 19:  1x5x11 1.833333       11/6  1049.36294     18 #> 20:  3x7x11 1.925000      77/40  1133.83013     19  # the 1-7-9-11-13 Dekany dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany_1_7_9_11_13 <- scale_table(dekany_harmonics, dekany_choose)) #>     product    ratio ratio_frac ratio_cents degree #>  1:     1x7 1.000000          1     0.00000      0 #>  2:    9x13 1.044643    117/112    75.61176      1 #>  3:     7x9 1.125000        9/8   203.91000      2 #>  4:   11x13 1.276786    143/112   423.01970      3 #>  5:     1x9 1.285714        9/7   435.08410      4 #>  6:    7x11 1.375000       11/8   551.31794      5 #>  7:    1x11 1.571429       11/7   782.49204      6 #>  8:    7x13 1.625000       13/8   840.52766      7 #>  9:    9x11 1.767857      99/56   986.40204      8 #> 10:    1x13 1.857143       13/7  1071.70176      9  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- scale_table(harmonics_35, choose_35)) #>     product    ratio ratio_frac ratio_cents degree #>  1:   1x3x5 1.000000          1     0.00000      0 #>  2:  5x9x11 1.031250      33/32    53.27294      1 #>  3: 7x11x13 1.042708   1001/960    72.40280      2 #>  4:   1x7x9 1.050000      21/20    84.46719      3 #>  5:  1x5x13 1.083333      13/12   138.57266      4 #>  6:  1x3x11 1.100000      11/10   165.00423      5 #>  7:   3x5x9 1.125000        9/8   203.91000      6 #>  8:  3x7x13 1.137500      91/80   223.03985      7 #>  9:   1x5x7 1.166667        7/6   266.87091      8 #> 10: 1x11x13 1.191667    143/120   303.57689      9 #> 11:  5x9x13 1.218750      39/32   342.48266     10 #> 12:  3x9x11 1.237500      99/80   368.91423     11 #> 13:  1x7x11 1.283333      77/60   431.87513     12 #> 14:  1x3x13 1.300000      13/10   454.21395     13 #> 15:   5x7x9 1.312500      21/16   470.78091     14 #> 16: 9x11x13 1.340625    429/320   507.48689     15 #> 17:  3x5x11 1.375000       11/8   551.31794     16 #> 18:   1x3x7 1.400000        7/5   582.51219     17 #> 19:  7x9x11 1.443750    231/160   635.78514     18 #> 20:  3x9x13 1.462500     117/80   658.12395     19 #> 21: 5x11x13 1.489583     143/96   689.89060     20 #> 22:   1x5x9 1.500000        3/2   701.95500     21 #> 23:  1x7x13 1.516667      91/60   721.08485     22 #> 24:   3x7x9 1.575000      63/40   786.42219     23 #> 25:  5x7x11 1.604167      77/48   818.18885     24 #> 26:  3x5x13 1.625000       13/8   840.52766     25 #> 27:  1x9x11 1.650000      33/20   866.95923     26 #> 28:  7x9x13 1.706250    273/160   924.99486     27 #> 29:   3x5x7 1.750000        7/4   968.82591     28 #> 30: 3x11x13 1.787500     143/80  1005.53189     29 #> 31:   1x3x9 1.800000        9/5  1017.59629     30 #> 32:  1x5x11 1.833333       11/6  1049.36294     31 #> 33:  5x7x13 1.895833      91/48  1107.39857     32 #> 34:  3x7x11 1.925000      77/40  1133.83013     33 #> 35:  1x9x13 1.950000      39/20  1156.16895     34 #>     product    ratio ratio_frac ratio_cents degree"},{"path":"/articles/constructing-the-eikosany.html","id":"interval-matrix-example","dir":"Articles","previous_headings":"","what":"Interval matrix example","title":"Constructing the Eikosany","text":"","code":"# the defaults yield the 1-3-5-7-9-11 Eikosany print(dekany_1_7_9_11_13_interval_matrix <-interval_matrix(dekany_1_7_9_11_13)) #>       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]    [,9]    #>  [1,]       1 112/117     8/9 112/143     7/9    8/11    7/11    8/13   56/99 #>  [2,] 117/112       1   13/14    9/11   13/16 117/154 117/176    9/14   13/22 #>  [3,]     9/8   14/13       1 126/143     7/8    9/11   63/88    9/13    7/11 #>  [4,] 143/112    11/9 143/126       1 143/144   13/14   13/16   11/14   13/18 #>  [5,]     9/7   16/13     8/7 144/143       1   72/77    9/11   72/91    8/11 #>  [6,]    11/8 154/117    11/9   14/13   77/72       1     7/8   11/13     7/9 #>  [7,]    11/7 176/117   88/63   16/13    11/9     8/7       1   88/91     8/9 #>  [8,]    13/8    14/9    13/9   14/11   91/72   13/11   91/88       1   91/99 #>  [9,]   99/56   22/13    11/7   18/13    11/8     9/7     9/8   99/91       1 #> [10,]    13/7    16/9  104/63   16/11    13/9  104/77   13/11     8/7  104/99 #>       [,10]   #>  [1,]    7/13 #>  [2,]    9/16 #>  [3,]  63/104 #>  [4,]   11/16 #>  [5,]    9/13 #>  [6,]  77/104 #>  [7,]   11/13 #>  [8,]     7/8 #>  [9,]  99/104 #> [10,]       1"},{"path":"/articles/constructing-the-eikosany.html","id":"tetrads-of-the-eikosany","dir":"Articles","previous_headings":"","what":"Tetrads of the eikosany","title":"Constructing the Eikosany","text":"","code":"# compute the tetrads of the 1-3-5-7-9-11 Eikosany print(eikosany_chords <- chord_table(eikosany, 4)) #>            chord     degrees #>  1:      1:3:5:7   1:6:11:15 #>  2:      1:3:5:9  7:11:14:19 #>  3:     1:3:5:11   2:8:11:13 #>  4:      1:3:7:9   1:9:14:18 #>  5:     1:3:7:11    1:4:8:12 #>  6:     1:3:9:11   5:8:14:16 #>  7:      1:5:7:9    3:6:9:19 #>  8:     1:5:7:11   4:6:13:17 #>  9:     1:5:9:11 10:13:16:19 #> 10:     1:7:9:11    0:4:9:16 #> 11:      3:5:7:9   3:7:15:18 #> 12:     3:5:7:11  2:12:15:17 #> 13:     3:5:9:11    2:5:7:10 #> 14:     3:7:9:11   0:5:12:18 #> 15:     5:7:9:11   0:3:10:17 #> 16:  /1:/3:/5:/7   0:5:10:16 #> 17:  /1:/3:/5:/9   0:4:12:17 #> 18: /1:/3:/5:/11    0:3:9:18 #> 19:  /1:/3:/7:/9  2:10:13:17 #> 20: /1:/3:/7:/11   3:7:10:19 #> 21: /1:/3:/9:/11   3:6:15:17 #> 22:  /1:/5:/7:/9    2:5:8:12 #> 23: /1:/5:/7:/11   5:7:14:18 #> 24: /1:/5:/9:/11  1:12:15:18 #> 25: /1:/7:/9:/11   2:7:11:15 #> 26:  /3:/5:/7:/9   4:8:13:16 #> 27: /3:/5:/7:/11  9:14:16:19 #> 28: /3:/5:/9:/11     1:4:6:9 #> 29: /3:/7:/9:/11  6:11:13:19 #> 30: /5:/7:/9:/11   1:8:11:14 #>            chord     degrees"},{"path":"/articles/constructing-the-eikosany.html","id":"keyboard-map-examples","dir":"Articles","previous_headings":"","what":"Keyboard map examples","title":"Constructing the Eikosany","text":"","code":"print(base_map_c4 <- base_keyboard_map()) #>      note_number degree_12edo octave_12edo note_name   freq_12edo cents_12edo #>   1:           0            0           -1        C      8.175799           0 #>   2:           1            1           -1        C#     8.661957         100 #>   3:           2            2           -1        D      9.177024         200 #>   4:           3            3           -1        D#     9.722718         300 #>   5:           4            4           -1        E     10.300861         400 #>  ---                                                                          #> 124:         123            3            9        D#  9956.063479       12300 #> 125:         124            4            9        E  10548.081821       12400 #> 126:         125            5            9        F  11175.303406       12500 #> 127:         126            6            9        F# 11839.821527       12600 #> 128:         127            7            9        G  12543.853951       12700 print(base_map_c3 <- base_keyboard_map(middle_c_octave = 3)) #>      note_number degree_12edo octave_12edo note_name   freq_12edo cents_12edo #>   1:           0            0           -2        C      8.175799           0 #>   2:           1            1           -2        C#     8.661957         100 #>   3:           2            2           -2        D      9.177024         200 #>   4:           3            3           -2        D#     9.722718         300 #>   5:           4            4           -2        E     10.300861         400 #>  ---                                                                          #> 124:         123            3            8        D#  9956.063479       12300 #> 125:         124            4            8        E  10548.081821       12400 #> 126:         125            5            8        F  11175.303406       12500 #> 127:         126            6            8        F# 11839.821527       12600 #> 128:         127            7            8        G  12543.853951       12700"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"M. Edward (Ed) Borasky. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Borasky M (2023). eikosany: Algorithmic Composition Erv Wilson's Combination Product Sets. https://algocompsynth.github.io/eikosany/, https://github.com/AlgoCompSynth/eikosany.","code":"@Manual{,   title = {eikosany: Algorithmic Composition With Erv Wilson's Combination Product Sets},   author = {M. Edward (Ed) Borasky},   year = {2023},   note = {https://algocompsynth.github.io/eikosany/, https://github.com/AlgoCompSynth/eikosany}, }"},{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"eikosany R package tools algorithmic composition Erv Wilson’s Combination Product Sets (Narushima 2019, chap. 6). ’s meant complement microtonal composition tools, replace . name: Eikosany 20-note scale derived Erv Wilson first six odd harmonics harmonic series - 1, 3, 5, 7, 9 11.","code":""},{"path":"/index.html","id":"other-tools","dir":"","previous_headings":"","what":"Other tools","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"Scala. Note: Scala multi-paradigm programming language runs Java Virtual Machine. specialized tool working musical scales. Wilsonic. free app runs iOS devices. don’t iOS devices ’ve never used . ODDSound MTS-ESP. plugin digital audio workstations (DAWs) facilitates production microtonal music. copy ’re making microtonal electronic music, . Eikosany scales Erv Wilson developed ship MTS-ESP, don’t really need R package compose . Sevish’s Scale Workshop. web-based tool working musical scales. Entonal Studio. Entonal Studio user interface package microtonal composition. can operate standalone application, plugin host plugin. copy Entonal Studio recommend highly.","code":""},{"path":"/index.html","id":"some-history","dir":"","previous_headings":"","what":"Some history","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"February 4, 2001, composer Iannis Xenakis passed away. ’ve fan experimental music, especially musique concrète, algorithmically composed music, microtonal music, avant-garde genres since undergraduate. Xenakis one major figures algorithmic composition. Reading first edition Tuning, Timbre, Spectrum, Scale 1 rekindled appreciation microtonal music Harry Partch. , armed copies Sethares (1998), Formalized Music 2, Genesis Music 3, embarked path led Harry Met Iannis 4. Harry Met Iannis premiered microtonal music festival El Paso, Texas late October, 2001. Bandcamp version essentially identical version; source code GitHub https://github.com/AlgoCompSynth/-harry-met-iannis. festival, met number composers working microtonal just intonation, one name kept coming : Erv Wilson. Wilson theoretician developed keyboards, scales tuning systems several composers using time, still using today. Terumi Narushima’s Microtonality Tuning Systems Erv Wilson 5 comprehensive documentation Wilson’s work basis code package.","code":""},{"path":"/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"two main motivations: ’s old saying really want learn something, teach computer . case Erv Wilson’s musical constructs, teasing construction processes others’ writings subject non-trivial task. example, much Wilson’s work consists multi-dimensional graph structures drawn flat paper. build physical three-dimensional models , can’t even rendered three dimension. graph theory operations generated musical ways traverse obvious. 20th anniversary Xenakis’ passing Harry Met Iannis occured second year virtual isolation COVID-19. 2021, acquired two synthesizers capable mapping keyboards arbitrary microtonal scales: Ashun Sound Machines Hydrasynth Desktop, Korg Minilogue XD. Hydrasynth ships tuning tables many Erv Wilson’s scales already firmware. Minilogue XD, user can load six custom scales software librarian program. ’m keyboard player, even , remapping process scales leaves middle C musician normally expect find . notes somewhere else. need translator music want write doesn’t involve lot trial error fumbling around remapped synthesizer -screen keyboard. CPS scales aimed harmonic musical structures like chords, finding remapped keyboard tedious error-prone. Music composed using Wilson’s musical structures mostly played instruments custom-built . keyboards designed Wilson’s microtonal music; indeed, Wilson designed microtonal keyboards (Narushima 2019, chap. 2). ’re quite expensive , like instruments, custom-built. need tools work .","code":""},{"path":"/index.html","id":"milestones","dir":"","previous_headings":"","what":"Milestones","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"ultimate goal package compose music using Combination Product Set (CPS) scales. three milestones path: v0.5.0: synthesizing tones CPS scale WAV files can used sample-based workflow, v0.7.5: creating MIDI files can imported DAW editing music production, v0.9.0: tools creating traversing diagrams CPS scales chords, using DiagrammeR (Iannone 2022).","code":""},{"path":[]},{"path":"/reference/base_keyboard_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Base Keyboard Map — base_keyboard_map","title":"Create Base Keyboard Map — base_keyboard_map","text":"Creates base keyboard map","code":""},{"path":"/reference/base_keyboard_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Base Keyboard Map — base_keyboard_map","text":"","code":"base_keyboard_map(middle_c_octave = 4)"},{"path":"/reference/base_keyboard_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Base Keyboard Map — base_keyboard_map","text":"middle_c_octave octave number middle C. default 4, software can use 3 number","code":""},{"path":"/reference/base_keyboard_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Base Keyboard Map — base_keyboard_map","text":"base keyboard map - synth tuned 12 EDO . data.table three columns: note_number: MIDI note number 0 127 note_name: note name (character) octave: octave number. offset defined parameter octave_offset. frequency: frequency Hz. convention, A440 MIDI note number 69, can computed 440.0 * 2 ^ ((note_number - 69) / 12) cents: cents default MIDI note 0. convention, zero note number 0.","code":""},{"path":"/reference/base_keyboard_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Base Keyboard Map — base_keyboard_map","text":"","code":"if (FALSE) {  keyboard_map_c4 <- base_keyboard_map() print(keyboard_map_c4) keyboard_map_c3 <- base_keyboard_map(middle_c_octave = 3) print(keyboard_map_c3) }"},{"path":"/reference/chord_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Chord Table — chord_table","title":"Create Chord Table — chord_table","text":"Creates chord table","code":""},{"path":"/reference/chord_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Chord Table — chord_table","text":"","code":"chord_table(scale_table, choose)"},{"path":"/reference/chord_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Chord Table — chord_table","text":"scale_table scale table use note number name lookup choose number harmonics choose chord","code":""},{"path":"/reference/chord_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Chord Table — chord_table","text":"data.table two columns: chord: chord expressed colon-separated harmonics. subharmonic chord prefixed \"~\". degrees: chord expressed colon-separated scale degrees","code":""},{"path":"/reference/chord_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Chord Table — chord_table","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany eikosany_scale <- scale_table() print(eikosany_scale)  # compute the tetrads of the 1-3-5-7-9-11 Eikosany eikosany_chords <- chord_table(eikosany_scale, 4) print(eikosany_chords) }"},{"path":"/reference/interval_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interval Matrix — interval_matrix","title":"Create Interval Matrix — interval_matrix","text":"Creates interval matrix scale table","code":""},{"path":"/reference/interval_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interval Matrix — interval_matrix","text":"","code":"interval_matrix(scale_table)"},{"path":"/reference/interval_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interval Matrix — interval_matrix","text":"scale_table scale table scale_table function","code":""},{"path":"/reference/interval_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interval Matrix — interval_matrix","text":"interval matrix","code":""},{"path":"/reference/interval_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interval Matrix — interval_matrix","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany_interval_matrix <-interval_matrix(scale_table())) }"},{"path":"/reference/scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Scale Table — scale_table","title":"Create Scale Table — scale_table","text":"Creates scale table combination product set definition","code":""},{"path":"/reference/scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Scale Table — scale_table","text":"","code":"scale_table(harmonics = c(1, 3, 5, 7, 9, 11), choose = 3)"},{"path":"/reference/scale_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Scale Table — scale_table","text":"harmonics vector harmonics use - defaults first six odd numbers, harmonics define 1-3-5-7-9-11 Eikosany. choose number harmonics choose combination - defaults 3, number harmonics combination Eikosany.","code":""},{"path":"/reference/scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Scale Table — scale_table","text":"data.table ten columns: product: product harmonics defines note (character) ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character) ratio_cents: ratio cents (hundredths semitone) degree: scale degree zero (number notes) - 1","code":""},{"path":"/reference/scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Scale Table — scale_table","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- scale_table())  # the 1-7-9-11-13 Dekany dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany_1_7_9_11_13 <- scale_table(dekany_harmonics, dekany_choose))  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- scale_table(harmonics_35, choose_35))  }"}]
