[{"path":"/articles/constructing-the-eikosany.html","id":"create_scale_table-examples","dir":"Articles","previous_headings":"","what":"create_scale_table examples","title":"Constructing the Eikosany","text":"","code":"# 12EDO scale table print(vanilla <- create_12edo_scale_table()) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset #>  1:        C  1.000000          1           0      0        C       0 #>  2:        C# 1.059463  1461/1379         100      1        C#      0 #>  3:        D  1.122462  1714/1527         200      2        D       0 #>  4:        D# 1.189207  1785/1501         300      3        D#      0 #>  5:        E  1.259921    635/504         400      4        E       0 #>  6:        F  1.334840  3249/2434         500      5        F       0 #>  7:        F# 1.414214   1393/985         600      6        F#      0 #>  8:        G  1.498307  2213/1477         700      7        G       0 #>  9:        G# 1.587401   1008/635         800      8        G#      0 #> 10:        A  1.681793  3002/1785         900      9        A       0 #> 11:        A# 1.781797   1527/857        1000     10        A#      0 #> 12:        B  1.887749  2943/1559        1100     11        B       0  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- create_scale_table()) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #>  1:     1x3x5 1.000000          1     0.00000      0        C      0.000000 #>  2:    5x9x11 1.031250      33/32    53.27294      1        C#   -46.727057 #>  3:     1x7x9 1.050000      21/20    84.46719      2        C#   -15.532807 #>  4:    1x3x11 1.100000      11/10   165.00423      3        D    -34.995772 #>  5:     3x5x9 1.125000        9/8   203.91000      4        D      3.910002 #>  6:     1x5x7 1.166667        7/6   266.87091      5        D#   -33.129094 #>  7:    3x9x11 1.237500      99/80   368.91423      6        E    -31.085770 #>  8:    1x7x11 1.283333      77/60   431.87513      7        E     31.875134 #>  9:     5x7x9 1.312500      21/16   470.78091      8        F    -29.219093 #> 10:    3x5x11 1.375000       11/8   551.31794      9        F#   -48.682058 #> 11:     1x3x7 1.400000        7/5   582.51219     10        F#   -17.487807 #> 12:    7x9x11 1.443750    231/160   635.78514     11        F#    35.785136 #> 13:     1x5x9 1.500000        3/2   701.95500     12        G      1.955001 #> 14:     3x7x9 1.575000      63/40   786.42219     13        G#   -13.577806 #> 15:    5x7x11 1.604167      77/48   818.18885     14        G#    18.188848 #> 16:    1x9x11 1.650000      33/20   866.95923     15        A    -33.040771 #> 17:     3x5x7 1.750000        7/4   968.82591     16        A#   -31.174094 #> 18:     1x3x9 1.800000        9/5  1017.59629     17        A#    17.596288 #> 19:    1x5x11 1.833333       11/6  1049.36294     18        A#    49.362941 #> 20:    3x7x11 1.925000      77/40  1133.83013     19        B     33.830135  # the 1-3-5-7 Hexany hexany_harmonics <- c(1, 3, 5, 7) hexany_choose = 2 print(hexany <- create_scale_table(hexany_harmonics, hexany_choose)) #>    note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #> 1:       1x3 1.000000          1      0.0000      0        C       0.00000 #> 2:       1x7 1.166667        7/6    266.8709      1        D#    -33.12909 #> 3:       3x5 1.250000        5/4    386.3137      2        E     -13.68629 #> 4:       5x7 1.458333      35/24    653.1846      3        G     -46.81538 #> 5:       1x5 1.666667        5/3    884.3587      4        A     -15.64129 #> 6:       3x7 1.750000        7/4    968.8259      5        A#    -31.17409  # the 1-7-9-11-13 2)5 Dekany dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany <- create_scale_table(dekany_harmonics, dekany_choose)) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #>  1:       1x7 1.000000          1     0.00000      0        C      0.000000 #>  2:      9x13 1.044643    117/112    75.61176      1        C#   -24.388243 #>  3:       7x9 1.125000        9/8   203.91000      2        D      3.910002 #>  4:     11x13 1.276786    143/112   423.01970      3        E     23.019698 #>  5:       1x9 1.285714        9/7   435.08410      4        E     35.084095 #>  6:      7x11 1.375000       11/8   551.31794      5        F#   -48.682058 #>  7:      1x11 1.571429       11/7   782.49204      6        G#   -17.507964 #>  8:      7x13 1.625000       13/8   840.52766      7        G#    40.527662 #>  9:      9x11 1.767857      99/56   986.40204      8        A#   -13.597962 #> 10:      1x13 1.857143       13/7  1071.70176      9        B    -28.298245  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- create_scale_table(harmonics_35, choose_35)) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #>  1:     1x3x5 1.000000          1     0.00000      0        C      0.000000 #>  2:    5x9x11 1.031250      33/32    53.27294      1        C#   -46.727057 #>  3:   7x11x13 1.042708   1001/960    72.40280      2        C#   -27.597204 #>  4:     1x7x9 1.050000      21/20    84.46719      3        C#   -15.532807 #>  5:    1x5x13 1.083333      13/12   138.57266      4        C#    38.572661 #>  6:    1x3x11 1.100000      11/10   165.00423      5        D    -34.995772 #>  7:     3x5x9 1.125000        9/8   203.91000      6        D      3.910002 #>  8:    3x7x13 1.137500      91/80   223.03985      7        D     23.039854 #>  9:     1x5x7 1.166667        7/6   266.87091      8        D#   -33.129094 #> 10:   1x11x13 1.191667    143/120   303.57689      9        D#     3.576889 #> 11:    5x9x13 1.218750      39/32   342.48266     10        D#    42.482663 #> 12:    3x9x11 1.237500      99/80   368.91423     11        E    -31.085770 #> 13:    1x7x11 1.283333      77/60   431.87513     12        E     31.875134 #> 14:    1x3x13 1.300000      13/10   454.21395     13        F    -45.786052 #> 15:     5x7x9 1.312500      21/16   470.78091     14        F    -29.219093 #> 16:   9x11x13 1.340625    429/320   507.48689     15        F      7.486891 #> 17:    3x5x11 1.375000       11/8   551.31794     16        F#   -48.682058 #> 18:     1x3x7 1.400000        7/5   582.51219     17        F#   -17.487807 #> 19:    7x9x11 1.443750    231/160   635.78514     18        F#    35.785136 #> 20:    3x9x13 1.462500     117/80   658.12395     19        G    -41.876050 #> 21:   5x11x13 1.489583     143/96   689.89060     20        G    -10.109397 #> 22:     1x5x9 1.500000        3/2   701.95500     21        G      1.955001 #> 23:    1x7x13 1.516667      91/60   721.08485     22        G     21.084854 #> 24:     3x7x9 1.575000      63/40   786.42219     23        G#   -13.577806 #> 25:    5x7x11 1.604167      77/48   818.18885     24        G#    18.188848 #> 26:    3x5x13 1.625000       13/8   840.52766     25        G#    40.527662 #> 27:    1x9x11 1.650000      33/20   866.95923     26        A    -33.040771 #> 28:    7x9x13 1.706250    273/160   924.99486     27        A     24.994855 #> 29:     3x5x7 1.750000        7/4   968.82591     28        A#   -31.174094 #> 30:   3x11x13 1.787500     143/80  1005.53189     29        A#     5.531890 #> 31:     1x3x9 1.800000        9/5  1017.59629     30        A#    17.596288 #> 32:    1x5x11 1.833333       11/6  1049.36294     31        A#    49.362941 #> 33:    5x7x13 1.895833      91/48  1107.39857     32        B      7.398567 #> 34:    3x7x11 1.925000      77/40  1133.83013     33        B     33.830135 #> 35:    1x9x13 1.950000      39/20  1156.16895     34        B     56.168949 #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents"},{"path":"/articles/constructing-the-eikosany.html","id":"interval-matrix-example","dir":"Articles","previous_headings":"","what":"Interval matrix example","title":"Constructing the Eikosany","text":"","code":"# the 1-3-5-7 Hexany print(hexany_interval_matrix <-create_interval_matrix(hexany)) #>      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  #> [1,]     1   6/7   4/5 24/35   3/5   4/7 #> [2,]   7/6     1 14/15   4/5  7/10   2/3 #> [3,]   5/4 15/14     1   6/7   3/4   5/7 #> [4,] 35/24   5/4   7/6     1   7/8   5/6 #> [5,]   5/3  10/7   4/3   8/7     1 20/21 #> [6,]   7/4   3/2   7/5   6/5 21/20     1"},{"path":"/articles/constructing-the-eikosany.html","id":"tetrads-of-the-eikosany","dir":"Articles","previous_headings":"","what":"Tetrads of the eikosany","title":"Constructing the Eikosany","text":"","code":"# compute the tetrads of the 1-3-5-7-9-11 Eikosany print(eikosany_chords <- create_chord_table(eikosany, 4)) #>            chord     degrees #>  1:      1:3:5:7   1:6:11:15 #>  2:      1:3:5:9  7:11:14:19 #>  3:     1:3:5:11   2:8:11:13 #>  4:      1:3:7:9   1:9:14:18 #>  5:     1:3:7:11    1:4:8:12 #>  6:     1:3:9:11   5:8:14:16 #>  7:      1:5:7:9    3:6:9:19 #>  8:     1:5:7:11   4:6:13:17 #>  9:     1:5:9:11 10:13:16:19 #> 10:     1:7:9:11    0:4:9:16 #> 11:      3:5:7:9   3:7:15:18 #> 12:     3:5:7:11  2:12:15:17 #> 13:     3:5:9:11    2:5:7:10 #> 14:     3:7:9:11   0:5:12:18 #> 15:     5:7:9:11   0:3:10:17 #> 16:  /1:/3:/5:/7   0:5:10:16 #> 17:  /1:/3:/5:/9   0:4:12:17 #> 18: /1:/3:/5:/11    0:3:9:18 #> 19:  /1:/3:/7:/9  2:10:13:17 #> 20: /1:/3:/7:/11   3:7:10:19 #> 21: /1:/3:/9:/11   3:6:15:17 #> 22:  /1:/5:/7:/9    2:5:8:12 #> 23: /1:/5:/7:/11   5:7:14:18 #> 24: /1:/5:/9:/11  1:12:15:18 #> 25: /1:/7:/9:/11   2:7:11:15 #> 26:  /3:/5:/7:/9   4:8:13:16 #> 27: /3:/5:/7:/11  9:14:16:19 #> 28: /3:/5:/9:/11     1:4:6:9 #> 29: /3:/7:/9:/11  6:11:13:19 #> 30: /5:/7:/9:/11   1:8:11:14 #>            chord     degrees"},{"path":"/articles/constructing-the-eikosany.html","id":"keyboard-map-examples","dir":"Articles","previous_headings":"","what":"Keyboard map examples","title":"Constructing the Eikosany","text":"","code":"hexany <- create_scale_table(hexany_harmonics, hexany_choose) print(hexany_keyboard_map <- create_keyboard_map(hexany)) #>      note_number note_name octave degree         freq cents #>   1:           0       1x3     -6      0     8.175799     0 #>   2:           1       1x7     -6      1     8.175799     0 #>   3:           2       3x5     -6      2     8.175799     0 #>   4:           3       5x7     -6      3     8.175799     0 #>   5:           4       1x5     -6      4     8.175799     0 #>  ---                                                        #> 124:         123       5x7     14      3 12543.853951 12700 #> 125:         124       1x5     14      4 12543.853951 12700 #> 126:         125       3x7     14      5 12543.853951 12700 #> 127:         126       1x3     15      0 12543.853951 12700 #> 128:         127       1x7     15      1 12543.853951 12700 print(dekany_keyboard_map <- create_keyboard_map(dekany)) #>      note_number note_name octave degree         freq cents #>   1:           0       1x7     -2      0     8.175799     0 #>   2:           1      9x13     -2      1     8.175799     0 #>   3:           2       7x9     -2      2     8.175799     0 #>   4:           3     11x13     -2      3     8.175799     0 #>   5:           4       1x9     -2      4     8.175799     0 #>  ---                                                        #> 124:         123     11x13     10      3 12543.853951 12700 #> 125:         124       1x9     10      4 12543.853951 12700 #> 126:         125      7x11     10      5 12543.853951 12700 #> 127:         126      1x11     10      6 12543.853951 12700 #> 128:         127      7x13     10      7 12543.853951 12700 print(vanilla_keyboard_map <- create_keyboard_map(vanilla)) #>      note_number note_name octave degree         freq cents #>   1:           0        C      -1      0     8.175799     0 #>   2:           1        C#     -1      1     8.661957   100 #>   3:           2        D      -1      2     9.177024   200 #>   4:           3        D#     -1      3     9.722718   300 #>   5:           4        E      -1      4    10.300861   400 #>  ---                                                        #> 124:         123        D#      9      3  9956.063479 12300 #> 125:         124        E       9      4 10548.081821 12400 #> 126:         125        F       9      5 11175.303406 12500 #> 127:         126        F#      9      6 11839.821527 12600 #> 128:         127        G       9      7 12543.853951 12700 print(eikosany_keyboard_map_c3 <-   create_keyboard_map(eikosany, middle_c_octave = 3) ) #>      note_number note_name octave degree       freq     cents #>   1:           0     1x3x5      0      0   32.70320  2400.000 #>   2:           1    5x9x11      0      1   33.72517  2453.273 #>   3:           2     1x7x9      0      2   34.33836  2484.467 #>   4:           3    1x3x11      0      3   35.97352  2565.004 #>   5:           4     3x5x9      0      4   36.79110  2603.910 #>  ---                                                          #> 124:         123    1x3x11      6      3 2302.30497  9765.004 #> 125:         124     3x5x9      6      4 2354.63009  9803.910 #> 126:         125     1x5x7      6      5 2441.83861  9866.871 #> 127:         126    3x9x11      6      6 2590.09310  9968.914 #> 128:         127    1x7x11      6      7 2686.02247 10031.875"},{"path":[]},{"path":"/articles/run-the-examples.html","id":"create_scale_table-examples","dir":"Articles","previous_headings":"","what":"create_scale_table examples","title":"Run the Examples","text":"","code":"# 12EDO scale table print(vanilla <- create_12edo_scale_table()) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset #>  1:        C  1.000000          1           0      0        C       0 #>  2:        C# 1.059463  1461/1379         100      1        C#      0 #>  3:        D  1.122462  1714/1527         200      2        D       0 #>  4:        D# 1.189207  1785/1501         300      3        D#      0 #>  5:        E  1.259921    635/504         400      4        E       0 #>  6:        F  1.334840  3249/2434         500      5        F       0 #>  7:        F# 1.414214   1393/985         600      6        F#      0 #>  8:        G  1.498307  2213/1477         700      7        G       0 #>  9:        G# 1.587401   1008/635         800      8        G#      0 #> 10:        A  1.681793  3002/1785         900      9        A       0 #> 11:        A# 1.781797   1527/857        1000     10        A#      0 #> 12:        B  1.887749  2943/1559        1100     11        B       0  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- create_scale_table()) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #>  1:     1x3x5 1.000000          1     0.00000      0        C      0.000000 #>  2:    5x9x11 1.031250      33/32    53.27294      1        C#   -46.727057 #>  3:     1x7x9 1.050000      21/20    84.46719      2        C#   -15.532807 #>  4:    1x3x11 1.100000      11/10   165.00423      3        D    -34.995772 #>  5:     3x5x9 1.125000        9/8   203.91000      4        D      3.910002 #>  6:     1x5x7 1.166667        7/6   266.87091      5        D#   -33.129094 #>  7:    3x9x11 1.237500      99/80   368.91423      6        E    -31.085770 #>  8:    1x7x11 1.283333      77/60   431.87513      7        E     31.875134 #>  9:     5x7x9 1.312500      21/16   470.78091      8        F    -29.219093 #> 10:    3x5x11 1.375000       11/8   551.31794      9        F#   -48.682058 #> 11:     1x3x7 1.400000        7/5   582.51219     10        F#   -17.487807 #> 12:    7x9x11 1.443750    231/160   635.78514     11        F#    35.785136 #> 13:     1x5x9 1.500000        3/2   701.95500     12        G      1.955001 #> 14:     3x7x9 1.575000      63/40   786.42219     13        G#   -13.577806 #> 15:    5x7x11 1.604167      77/48   818.18885     14        G#    18.188848 #> 16:    1x9x11 1.650000      33/20   866.95923     15        A    -33.040771 #> 17:     3x5x7 1.750000        7/4   968.82591     16        A#   -31.174094 #> 18:     1x3x9 1.800000        9/5  1017.59629     17        A#    17.596288 #> 19:    1x5x11 1.833333       11/6  1049.36294     18        A#    49.362941 #> 20:    3x7x11 1.925000      77/40  1133.83013     19        B     33.830135  # the 1-3-5-7 Hexany hexany_harmonics <- c(1, 3, 5, 7) hexany_choose = 2 print(hexany <- create_scale_table(hexany_harmonics, hexany_choose)) #>    note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #> 1:       1x3 1.000000          1      0.0000      0        C       0.00000 #> 2:       1x7 1.166667        7/6    266.8709      1        D#    -33.12909 #> 3:       3x5 1.250000        5/4    386.3137      2        E     -13.68629 #> 4:       5x7 1.458333      35/24    653.1846      3        G     -46.81538 #> 5:       1x5 1.666667        5/3    884.3587      4        A     -15.64129 #> 6:       3x7 1.750000        7/4    968.8259      5        A#    -31.17409  # the 1-7-9-11-13 2)5 Dekany dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany <- create_scale_table(dekany_harmonics, dekany_choose)) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #>  1:       1x7 1.000000          1     0.00000      0        C      0.000000 #>  2:      9x13 1.044643    117/112    75.61176      1        C#   -24.388243 #>  3:       7x9 1.125000        9/8   203.91000      2        D      3.910002 #>  4:     11x13 1.276786    143/112   423.01970      3        E     23.019698 #>  5:       1x9 1.285714        9/7   435.08410      4        E     35.084095 #>  6:      7x11 1.375000       11/8   551.31794      5        F#   -48.682058 #>  7:      1x11 1.571429       11/7   782.49204      6        G#   -17.507964 #>  8:      7x13 1.625000       13/8   840.52766      7        G#    40.527662 #>  9:      9x11 1.767857      99/56   986.40204      8        A#   -13.597962 #> 10:      1x13 1.857143       13/7  1071.70176      9        B    -28.298245  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- create_scale_table(harmonics_35, choose_35)) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #>  1:     1x3x5 1.000000          1     0.00000      0        C      0.000000 #>  2:    5x9x11 1.031250      33/32    53.27294      1        C#   -46.727057 #>  3:   7x11x13 1.042708   1001/960    72.40280      2        C#   -27.597204 #>  4:     1x7x9 1.050000      21/20    84.46719      3        C#   -15.532807 #>  5:    1x5x13 1.083333      13/12   138.57266      4        C#    38.572661 #>  6:    1x3x11 1.100000      11/10   165.00423      5        D    -34.995772 #>  7:     3x5x9 1.125000        9/8   203.91000      6        D      3.910002 #>  8:    3x7x13 1.137500      91/80   223.03985      7        D     23.039854 #>  9:     1x5x7 1.166667        7/6   266.87091      8        D#   -33.129094 #> 10:   1x11x13 1.191667    143/120   303.57689      9        D#     3.576889 #> 11:    5x9x13 1.218750      39/32   342.48266     10        D#    42.482663 #> 12:    3x9x11 1.237500      99/80   368.91423     11        E    -31.085770 #> 13:    1x7x11 1.283333      77/60   431.87513     12        E     31.875134 #> 14:    1x3x13 1.300000      13/10   454.21395     13        F    -45.786052 #> 15:     5x7x9 1.312500      21/16   470.78091     14        F    -29.219093 #> 16:   9x11x13 1.340625    429/320   507.48689     15        F      7.486891 #> 17:    3x5x11 1.375000       11/8   551.31794     16        F#   -48.682058 #> 18:     1x3x7 1.400000        7/5   582.51219     17        F#   -17.487807 #> 19:    7x9x11 1.443750    231/160   635.78514     18        F#    35.785136 #> 20:    3x9x13 1.462500     117/80   658.12395     19        G    -41.876050 #> 21:   5x11x13 1.489583     143/96   689.89060     20        G    -10.109397 #> 22:     1x5x9 1.500000        3/2   701.95500     21        G      1.955001 #> 23:    1x7x13 1.516667      91/60   721.08485     22        G     21.084854 #> 24:     3x7x9 1.575000      63/40   786.42219     23        G#   -13.577806 #> 25:    5x7x11 1.604167      77/48   818.18885     24        G#    18.188848 #> 26:    3x5x13 1.625000       13/8   840.52766     25        G#    40.527662 #> 27:    1x9x11 1.650000      33/20   866.95923     26        A    -33.040771 #> 28:    7x9x13 1.706250    273/160   924.99486     27        A     24.994855 #> 29:     3x5x7 1.750000        7/4   968.82591     28        A#   -31.174094 #> 30:   3x11x13 1.787500     143/80  1005.53189     29        A#     5.531890 #> 31:     1x3x9 1.800000        9/5  1017.59629     30        A#    17.596288 #> 32:    1x5x11 1.833333       11/6  1049.36294     31        A#    49.362941 #> 33:    5x7x13 1.895833      91/48  1107.39857     32        B      7.398567 #> 34:    3x7x11 1.925000      77/40  1133.83013     33        B     33.830135 #> 35:    1x9x13 1.950000      39/20  1156.16895     34        B     56.168949 #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents"},{"path":"/articles/run-the-examples.html","id":"interval-matrix-example","dir":"Articles","previous_headings":"","what":"Interval matrix example","title":"Run the Examples","text":"","code":"# the 1-3-5-7 Hexany print(hexany_interval_matrix <-create_interval_matrix(hexany)) #>      from_0 from_1 from_2 from_3 from_4 from_5 #> to_0     1    6/7    4/5  24/35    3/5    4/7  #> to_1   7/6      1  14/15    4/5   7/10    2/3  #> to_2   5/4  15/14      1    6/7    3/4    5/7  #> to_3 35/24    5/4    7/6      1    7/8    5/6  #> to_4   5/3   10/7    4/3    8/7      1  20/21  #> to_5   7/4    3/2    7/5    6/5  21/20      1"},{"path":"/articles/run-the-examples.html","id":"interval-list-example","dir":"Articles","previous_headings":"","what":"Interval list example","title":"Run the Examples","text":"","code":"print(eikosany_interval_list <-create_interval_list(eikosany)) #>      from_name from_degree to_name to_degree     ratio ratio_frac ratio_cents #>   1:    3x7x11          19   1x3x5         0 0.5194805      40/77   -1133.830 #>   2:    3x7x11          19  5x9x11         1 0.5357143      15/28   -1080.557 #>   3:    3x7x11          19   1x7x9         2 0.5454545       6/11   -1049.363 #>   4:    1x5x11          18   1x3x5         0 0.5454545       6/11   -1049.363 #>   5:     1x3x9          17   1x3x5         0 0.5555556        5/9   -1017.596 #>  ---                                                                          #> 396:     1x3x5           0   1x3x9        17 1.8000000        9/5    1017.596 #> 397:     1x3x5           0  1x5x11        18 1.8333333       11/6    1049.363 #> 398:     1x7x9           2  3x7x11        19 1.8333333       11/6    1049.363 #> 399:    5x9x11           1  3x7x11        19 1.8666667      28/15    1080.557 #> 400:     1x3x5           0  3x7x11        19 1.9250000      77/40    1133.830"},{"path":"/articles/run-the-examples.html","id":"tetrads-of-the-eikosany","dir":"Articles","previous_headings":"","what":"Tetrads of the eikosany","title":"Run the Examples","text":"","code":"# compute the tetrads of the 1-3-5-7-9-11 Eikosany print(eikosany_chords <- create_chord_table(eikosany, 4)) #>            chord     degrees #>  1:      1:3:5:7   1:6:11:15 #>  2:      1:3:5:9  7:11:14:19 #>  3:     1:3:5:11   2:8:11:13 #>  4:      1:3:7:9   1:9:14:18 #>  5:     1:3:7:11    1:4:8:12 #>  6:     1:3:9:11   5:8:14:16 #>  7:      1:5:7:9    3:6:9:19 #>  8:     1:5:7:11   4:6:13:17 #>  9:     1:5:9:11 10:13:16:19 #> 10:     1:7:9:11    0:4:9:16 #> 11:      3:5:7:9   3:7:15:18 #> 12:     3:5:7:11  2:12:15:17 #> 13:     3:5:9:11    2:5:7:10 #> 14:     3:7:9:11   0:5:12:18 #> 15:     5:7:9:11   0:3:10:17 #> 16:  /1:/3:/5:/7   0:5:10:16 #> 17:  /1:/3:/5:/9   0:4:12:17 #> 18: /1:/3:/5:/11    0:3:9:18 #> 19:  /1:/3:/7:/9  2:10:13:17 #> 20: /1:/3:/7:/11   3:7:10:19 #> 21: /1:/3:/9:/11   3:6:15:17 #> 22:  /1:/5:/7:/9    2:5:8:12 #> 23: /1:/5:/7:/11   5:7:14:18 #> 24: /1:/5:/9:/11  1:12:15:18 #> 25: /1:/7:/9:/11   2:7:11:15 #> 26:  /3:/5:/7:/9   4:8:13:16 #> 27: /3:/5:/7:/11  9:14:16:19 #> 28: /3:/5:/9:/11     1:4:6:9 #> 29: /3:/7:/9:/11  6:11:13:19 #> 30: /5:/7:/9:/11   1:8:11:14 #>            chord     degrees"},{"path":"/articles/run-the-examples.html","id":"keyboard-map-examples","dir":"Articles","previous_headings":"","what":"Keyboard map examples","title":"Run the Examples","text":"","code":"hexany <- create_scale_table(hexany_harmonics, hexany_choose) print(hexany_keyboard_map <- create_keyboard_map(hexany)) #>      note_number note_name ratio_frac octave degree         freq cents #>   1:           0       1x3          1     -6      0     8.175799     0 #>   2:           1       1x7        7/6     -6      1     8.175799     0 #>   3:           2       3x5        5/4     -6      2     8.175799     0 #>   4:           3       5x7      35/24     -6      3     8.175799     0 #>   5:           4       1x5        5/3     -6      4     8.175799     0 #>  ---                                                                   #> 124:         123       5x7      35/24     14      3 12543.853951 12700 #> 125:         124       1x5        5/3     14      4 12543.853951 12700 #> 126:         125       3x7        7/4     14      5 12543.853951 12700 #> 127:         126       1x3          1     15      0 12543.853951 12700 #> 128:         127       1x7        7/6     15      1 12543.853951 12700 #>      name_12edo #>   1:         C  #>   2:         C# #>   3:         D  #>   4:         D# #>   5:         E  #>  ---            #> 124:         D# #> 125:         E  #> 126:         F  #> 127:         F# #> 128:         G print(dekany_keyboard_map <- create_keyboard_map(dekany)) #>      note_number note_name ratio_frac octave degree         freq cents #>   1:           0       1x7          1     -2      0     8.175799     0 #>   2:           1      9x13    117/112     -2      1     8.175799     0 #>   3:           2       7x9        9/8     -2      2     8.175799     0 #>   4:           3     11x13    143/112     -2      3     8.175799     0 #>   5:           4       1x9        9/7     -2      4     8.175799     0 #>  ---                                                                   #> 124:         123     11x13    143/112     10      3 12543.853951 12700 #> 125:         124       1x9        9/7     10      4 12543.853951 12700 #> 126:         125      7x11       11/8     10      5 12543.853951 12700 #> 127:         126      1x11       11/7     10      6 12543.853951 12700 #> 128:         127      7x13       13/8     10      7 12543.853951 12700 #>      name_12edo #>   1:         C  #>   2:         C# #>   3:         D  #>   4:         D# #>   5:         E  #>  ---            #> 124:         D# #> 125:         E  #> 126:         F  #> 127:         F# #> 128:         G print(vanilla_keyboard_map <- create_keyboard_map(vanilla)) #>      note_number note_name ratio_frac octave degree         freq cents #>   1:           0        C           1     -1      0     8.175799     0 #>   2:           1        C#  1461/1379     -1      1     8.661957   100 #>   3:           2        D   1714/1527     -1      2     9.177024   200 #>   4:           3        D#  1785/1501     -1      3     9.722718   300 #>   5:           4        E     635/504     -1      4    10.300861   400 #>  ---                                                                   #> 124:         123        D#  1785/1501      9      3  9956.063479 12300 #> 125:         124        E     635/504      9      4 10548.081821 12400 #> 126:         125        F   3249/2434      9      5 11175.303406 12500 #> 127:         126        F#   1393/985      9      6 11839.821527 12600 #> 128:         127        G   2213/1477      9      7 12543.853951 12700 #>      name_12edo #>   1:         C  #>   2:         C# #>   3:         D  #>   4:         D# #>   5:         E  #>  ---            #> 124:         D# #> 125:         E  #> 126:         F  #> 127:         F# #> 128:         G print(eikosany_keyboard_map_c3 <-   create_keyboard_map(eikosany, middle_c_octave = 3) ) #>      note_number note_name ratio_frac octave degree       freq     cents #>   1:           0     1x3x5          1      0      0   32.70320  2400.000 #>   2:           1    5x9x11      33/32      0      1   33.72517  2453.273 #>   3:           2     1x7x9      21/20      0      2   34.33836  2484.467 #>   4:           3    1x3x11      11/10      0      3   35.97352  2565.004 #>   5:           4     3x5x9        9/8      0      4   36.79110  2603.910 #>  ---                                                                     #> 124:         123    1x3x11      11/10      6      3 2302.30497  9765.004 #> 125:         124     3x5x9        9/8      6      4 2354.63009  9803.910 #> 126:         125     1x5x7        7/6      6      5 2441.83861  9866.871 #> 127:         126    3x9x11      99/80      6      6 2590.09310  9968.914 #> 128:         127    1x7x11      77/60      6      7 2686.02247 10031.875 #>      name_12edo #>   1:         C  #>   2:         C# #>   3:         D  #>   4:         D# #>   5:         E  #>  ---            #> 124:         D# #> 125:         E  #> 126:         F  #> 127:         F# #> 128:         G"},{"path":"/articles/run-the-examples.html","id":"minilogue-xd--scl-file-example","dir":"Articles","previous_headings":"","what":"Minilogue XD .scl file example","title":"Run the Examples","text":"","code":"print(eikosany_minilogue_xd_scl_file <- create_minilogue_xd_scale_file(   eikosany_keyboard_map_c3,   \"~/Eikosany-1-3-5-7-9-11.scl\",   \"Eikosany 1-3-5-7-9-11\" )) #>   [1] \"! ~/Eikosany-1-3-5-7-9-11.scl\"             #>   [2] \"Eikosany 1-3-5-7-9-11\"                     #>   [3] \"! number of ratios in scale\"               #>   [4] \"127\"                                       #>   [5] \"! ratios (cents above MIDI note number 0)\" #>   [6] \"2453.272943\"                               #>   [7] \"2484.467193\"                               #>   [8] \"2565.004228\"                               #>   [9] \"2603.910002\"                               #>  [10] \"2666.870906\"                               #>  [11] \"2768.914230\"                               #>  [12] \"2831.875134\"                               #>  [13] \"2870.780907\"                               #>  [14] \"2951.317942\"                               #>  [15] \"2982.512193\"                               #>  [16] \"3035.785136\"                               #>  [17] \"3101.955001\"                               #>  [18] \"3186.422194\"                               #>  [19] \"3218.188848\"                               #>  [20] \"3266.959229\"                               #>  [21] \"3368.825906\"                               #>  [22] \"3417.596288\"                               #>  [23] \"3449.362941\"                               #>  [24] \"3533.830135\"                               #>  [25] \"3600.000000\"                               #>  [26] \"3653.272943\"                               #>  [27] \"3684.467193\"                               #>  [28] \"3765.004228\"                               #>  [29] \"3803.910002\"                               #>  [30] \"3866.870906\"                               #>  [31] \"3968.914230\"                               #>  [32] \"4031.875134\"                               #>  [33] \"4070.780907\"                               #>  [34] \"4151.317942\"                               #>  [35] \"4182.512193\"                               #>  [36] \"4235.785136\"                               #>  [37] \"4301.955001\"                               #>  [38] \"4386.422194\"                               #>  [39] \"4418.188848\"                               #>  [40] \"4466.959229\"                               #>  [41] \"4568.825906\"                               #>  [42] \"4617.596288\"                               #>  [43] \"4649.362941\"                               #>  [44] \"4733.830135\"                               #>  [45] \"4800.000000\"                               #>  [46] \"4853.272943\"                               #>  [47] \"4884.467193\"                               #>  [48] \"4965.004228\"                               #>  [49] \"5003.910002\"                               #>  [50] \"5066.870906\"                               #>  [51] \"5168.914230\"                               #>  [52] \"5231.875134\"                               #>  [53] \"5270.780907\"                               #>  [54] \"5351.317942\"                               #>  [55] \"5382.512193\"                               #>  [56] \"5435.785136\"                               #>  [57] \"5501.955001\"                               #>  [58] \"5586.422194\"                               #>  [59] \"5618.188848\"                               #>  [60] \"5666.959229\"                               #>  [61] \"5768.825906\"                               #>  [62] \"5817.596288\"                               #>  [63] \"5849.362941\"                               #>  [64] \"5933.830135\"                               #>  [65] \"6000.000000\"                               #>  [66] \"6053.272943\"                               #>  [67] \"6084.467193\"                               #>  [68] \"6165.004228\"                               #>  [69] \"6203.910002\"                               #>  [70] \"6266.870906\"                               #>  [71] \"6368.914230\"                               #>  [72] \"6431.875134\"                               #>  [73] \"6470.780907\"                               #>  [74] \"6551.317942\"                               #>  [75] \"6582.512193\"                               #>  [76] \"6635.785136\"                               #>  [77] \"6701.955001\"                               #>  [78] \"6786.422194\"                               #>  [79] \"6818.188848\"                               #>  [80] \"6866.959229\"                               #>  [81] \"6968.825906\"                               #>  [82] \"7017.596288\"                               #>  [83] \"7049.362941\"                               #>  [84] \"7133.830135\"                               #>  [85] \"7200.000000\"                               #>  [86] \"7253.272943\"                               #>  [87] \"7284.467193\"                               #>  [88] \"7365.004228\"                               #>  [89] \"7403.910002\"                               #>  [90] \"7466.870906\"                               #>  [91] \"7568.914230\"                               #>  [92] \"7631.875134\"                               #>  [93] \"7670.780907\"                               #>  [94] \"7751.317942\"                               #>  [95] \"7782.512193\"                               #>  [96] \"7835.785136\"                               #>  [97] \"7901.955001\"                               #>  [98] \"7986.422194\"                               #>  [99] \"8018.188848\"                               #> [100] \"8066.959229\"                               #> [101] \"8168.825906\"                               #> [102] \"8217.596288\"                               #> [103] \"8249.362941\"                               #> [104] \"8333.830135\"                               #> [105] \"8400.000000\"                               #> [106] \"8453.272943\"                               #> [107] \"8484.467193\"                               #> [108] \"8565.004228\"                               #> [109] \"8603.910002\"                               #> [110] \"8666.870906\"                               #> [111] \"8768.914230\"                               #> [112] \"8831.875134\"                               #> [113] \"8870.780907\"                               #> [114] \"8951.317942\"                               #> [115] \"8982.512193\"                               #> [116] \"9035.785136\"                               #> [117] \"9101.955001\"                               #> [118] \"9186.422194\"                               #> [119] \"9218.188848\"                               #> [120] \"9266.959229\"                               #> [121] \"9368.825906\"                               #> [122] \"9417.596288\"                               #> [123] \"9449.362941\"                               #> [124] \"9533.830135\"                               #> [125] \"9600.000000\"                               #> [126] \"9653.272943\"                               #> [127] \"9684.467193\"                               #> [128] \"9765.004228\"                               #> [129] \"9803.910002\"                               #> [130] \"9866.870906\"                               #> [131] \"9968.914230\"                               #> [132] \"10031.875134\""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"M. Edward (Ed) Borasky. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Borasky M (2023). eikosany: Algorithmic Composition Erv Wilson's Combination Product Sets. https://algocompsynth.github.io/eikosany/, https://github.com/AlgoCompSynth/eikosany.","code":"@Manual{,   title = {eikosany: Algorithmic Composition With Erv Wilson's Combination Product Sets},   author = {M. Edward (Ed) Borasky},   year = {2023},   note = {https://algocompsynth.github.io/eikosany/, https://github.com/AlgoCompSynth/eikosany}, }"},{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"eikosany R package tools algorithmic composition Erv Wilson’s Combination Product Sets (Narushima 2019, chap. 6). ’s meant complement microtonal composition tools, replace . name: Eikosany 20-note scale derived Erv Wilson first six odd harmonics harmonic series - 1, 3, 5, 7, 9 11.","code":""},{"path":"/index.html","id":"other-tools","dir":"","previous_headings":"","what":"Other tools","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"Scala. Note: Scala multi-paradigm programming language runs Java Virtual Machine. specialized tool working musical scales. Wilsonic. free app runs iOS devices. don’t iOS devices ’ve never used . ODDSound MTS-ESP. plugin digital audio workstations (DAWs) facilitates production microtonal music. copy ’re making microtonal electronic music, . Eikosany scales Erv Wilson developed ship MTS-ESP, don’t really need R package compose . Sevish’s Scale Workshop. web-based tool working musical scales. Entonal Studio. Entonal Studio user interface package microtonal composition. can operate standalone application, plugin host plugin. copy Entonal Studio recommend highly. Universal Tuning Editor. Universal Tuning Editor application computing visualizing microtonal scales tunings, includes tools interface hardware software synthesizers.","code":""},{"path":"/index.html","id":"some-history","dir":"","previous_headings":"","what":"Some history","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"February 4, 2001, composer Iannis Xenakis passed away. ’ve fan experimental music, especially musique concrète, algorithmically composed music, microtonal music, avant-garde genres since undergraduate. Xenakis one major figures algorithmic composition. Reading first edition Tuning, Timbre, Spectrum, Scale 1 rekindled appreciation microtonal music Harry Partch. , armed copies Sethares (1998), Formalized Music 2, Genesis Music 3, embarked path led Harry Met Iannis 4. Harry Met Iannis premiered microtonal music festival El Paso, Texas late October, 2001. Bandcamp version essentially identical version; source code GitHub https://github.com/AlgoCompSynth/-harry-met-iannis. festival, met number composers working microtonal just intonation, one name kept coming : Erv Wilson. Wilson theoretician developed keyboards, scales tuning systems several composers using time, still using today. Terumi Narushima’s Microtonality Tuning Systems Erv Wilson 5 comprehensive documentation Wilson’s work basis code package.","code":""},{"path":"/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"two main motivations: ’s old saying really want learn something, teach computer . case Erv Wilson’s musical constructs, teasing construction processes others’ writings subject non-trivial task. example, much Wilson’s work consists multi-dimensional graph structures drawn flat paper. build physical three-dimensional models , can’t even rendered three dimension. graph theory operations generated musical ways traverse obvious. 20th anniversary Xenakis’ passing Harry Met Iannis occured second year virtual isolation COVID-19. 2021, acquired two synthesizers capable mapping keyboards arbitrary microtonal scales: Ashun Sound Machines Hydrasynth Desktop, Korg Minilogue XD. Hydrasynth ships tuning tables many Erv Wilson’s scales already firmware. Minilogue XD, user can load six custom scales software librarian program. ’m keyboard player, even , remapping process scales leaves middle C musician normally expect find . notes somewhere else. need translator music want write doesn’t involve lot trial error fumbling around remapped synthesizer -screen keyboard. CPS scales aimed harmonic musical structures like chords, finding remapped keyboard tedious error-prone. Music composed using Wilson’s musical structures mostly played instruments custom-built . keyboards designed Wilson’s microtonal music; indeed, Wilson designed microtonal keyboards (Narushima 2019, chap. 2). ’re quite expensive , like instruments, custom-built. need tools work .","code":""},{"path":"/index.html","id":"milestones","dir":"","previous_headings":"","what":"Milestones","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"ultimate goal package compose music using Combination Product Set (CPS) scales. three milestones path: v0.5.0: synthesizing tones CPS scale WAV files can used sample-based workflow, v0.7.5: creating MIDI files can imported DAW editing music production, v0.9.0: tools creating traversing diagrams CPS scales chords, using DiagrammeR (Iannone 2022).","code":""},{"path":[]},{"path":"/reference/base_keyboard_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Base Keyboard Map — base_keyboard_map","title":"Create Base Keyboard Map — base_keyboard_map","text":"Creates base keyboard map","code":""},{"path":"/reference/base_keyboard_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Base Keyboard Map — base_keyboard_map","text":"","code":"base_keyboard_map(middle_c_octave = 4)"},{"path":"/reference/base_keyboard_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Base Keyboard Map — base_keyboard_map","text":"middle_c_octave octave number middle C. default 4, software can use 3 number","code":""},{"path":"/reference/base_keyboard_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Base Keyboard Map — base_keyboard_map","text":"base keyboard map - synth tuned 12 EDO . data.table three columns: note_number: MIDI note number 0 127 note_name: note name (character) octave: octave number. offset defined parameter octave_offset. frequency: frequency Hz. convention, A440 MIDI note number 69, can computed 440.0 * 2 ^ ((note_number - 69) / 12) cents: cents default MIDI note 0. convention, zero note number 0.","code":""},{"path":"/reference/base_keyboard_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Base Keyboard Map — base_keyboard_map","text":"","code":"if (FALSE) {  keyboard_map_c4 <- base_keyboard_map() print(keyboard_map_c4) keyboard_map_c3 <- base_keyboard_map(middle_c_octave = 3) print(keyboard_map_c3) }"},{"path":"/reference/chord_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Chord Table — chord_table","title":"Create Chord Table — chord_table","text":"Creates chord table","code":""},{"path":"/reference/chord_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Chord Table — chord_table","text":"","code":"chord_table(scale_table, choose)"},{"path":"/reference/chord_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Chord Table — chord_table","text":"scale_table scale table use note number name lookup choose number harmonics choose chord","code":""},{"path":"/reference/chord_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Chord Table — chord_table","text":"data.table two columns: chord: chord expressed colon-separated harmonics. subharmonic chord prefixed \"~\". degrees: chord expressed colon-separated scale degrees","code":""},{"path":"/reference/chord_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Chord Table — chord_table","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany eikosany_scale <- scale_table() print(eikosany_scale)  # compute the tetrads of the 1-3-5-7-9-11 Eikosany eikosany_chords <- chord_table(eikosany_scale, 4) print(eikosany_chords) }"},{"path":"/reference/create_12edo_scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 12EDO Scale Table — create_12edo_scale_table","title":"Create 12EDO Scale Table — create_12edo_scale_table","text":"Creates scale table 12EDO","code":""},{"path":"/reference/create_12edo_scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 12EDO Scale Table — create_12edo_scale_table","text":"","code":"create_12edo_scale_table()"},{"path":"/reference/create_12edo_scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 12EDO Scale Table — create_12edo_scale_table","text":"data.table ten columns: note_name: note name (character) ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character). ratios 12EDO irrational, approximation. ratio_cents: ratio cents (hundredths semitone) degree: scale degree zero (number notes) - 1 key_12EDO: note name nearest 12EDO note offset_cents: offset cents key_12EDO","code":""},{"path":"/reference/create_12edo_scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 12EDO Scale Table — create_12edo_scale_table","text":"","code":"if (FALSE) {  print(vanilla <- create_12edo_scale_table())  }"},{"path":"/reference/create_chord_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Chord Plot — create_chord_plot","title":"Create Chord Plot — create_chord_plot","text":"Creates ggplot2 object plot chord","code":""},{"path":"/reference/create_chord_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Chord Plot — create_chord_plot","text":"","code":"create_chord_plot(chord, title_string)"},{"path":"/reference/create_chord_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Chord Plot — create_chord_plot","text":"chord numeric vector scale degrees chord title_string string use plot title. usually chord name chord table","code":""},{"path":"/reference/create_chord_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Chord Plot — create_chord_plot","text":"ggplot2 object can printed","code":""},{"path":"/reference/create_chord_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Chord Plot — create_chord_plot","text":"","code":"if (FALSE) {   print(create_chord_plot(c(1, 6, 11, 15), \"1:3:5:7\")) }"},{"path":"/reference/create_chord_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Chord Table — create_chord_table","title":"Create Chord Table — create_chord_table","text":"Creates chord table","code":""},{"path":"/reference/create_chord_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Chord Table — create_chord_table","text":"","code":"create_chord_table(scale_table, choose)"},{"path":"/reference/create_chord_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Chord Table — create_chord_table","text":"scale_table scale table use note number name lookup choose number harmonics choose chord","code":""},{"path":"/reference/create_chord_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Chord Table — create_chord_table","text":"data.table two columns: chord: chord expressed colon-separated harmonics. subharmonic chord prefixed \"~\". degrees: chord expressed colon-separated scale degrees","code":""},{"path":"/reference/create_chord_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Chord Table — create_chord_table","text":"","code":"if (FALSE) {   # compute the tetrads of the 1-3-5-7-9-11 Eikosany eikosany <- create_scale_table() print(eikosany_chords <- create_chord_table(eikosany, 4)) }"},{"path":"/reference/create_interval_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interval List — create_interval_list","title":"Create Interval List — create_interval_list","text":"Creates interval list scale table","code":""},{"path":"/reference/create_interval_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interval List — create_interval_list","text":"","code":"create_interval_list(scale_table)"},{"path":"/reference/create_interval_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interval List — create_interval_list","text":"scale_table scale table create_scale_table","code":""},{"path":"/reference/create_interval_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interval List — create_interval_list","text":"interval list. data.table seven columns name \"\" note from_degree scale degree \"\" note name \"\" note to_degree scale degree \"\" note ratio interval number ratio_frac interval vulgar fraction (character) ratio_cents interval cents","code":""},{"path":"/reference/create_interval_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interval List — create_interval_list","text":"","code":"if (FALSE) {  # default is the 1-3-5-7-9-11 Eikosany eikosany <- create_scale_table() print(eikosany_interval_list <-create_interval_list(eikosany))  }"},{"path":"/reference/create_interval_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interval Matrix — create_interval_matrix","title":"Create Interval Matrix — create_interval_matrix","text":"Creates interval matrix scale table","code":""},{"path":"/reference/create_interval_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interval Matrix — create_interval_matrix","text":"","code":"create_interval_matrix(scale_table)"},{"path":"/reference/create_interval_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interval Matrix — create_interval_matrix","text":"scale_table scale table create_scale_table function","code":""},{"path":"/reference/create_interval_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interval Matrix — create_interval_matrix","text":"interval matrix","code":""},{"path":"/reference/create_interval_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interval Matrix — create_interval_matrix","text":"","code":"if (FALSE) {  # the 1-3-5-7 Hexany hexany_harmonics <- c(1, 3, 5, 7) hexany_choose = 2 hexany <- create_scale_table(hexany_harmonics, hexany_choose) print(hexany_interval_matrix <-create_interval_matrix(hexany)) }"},{"path":"/reference/create_keyboard_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Keyboard Map — create_keyboard_map","title":"Create Keyboard Map — create_keyboard_map","text":"Creates keyboard map","code":""},{"path":"/reference/create_keyboard_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Keyboard Map — create_keyboard_map","text":"","code":"create_keyboard_map(scale_table, middle_c_octave = 4)"},{"path":"/reference/create_keyboard_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Keyboard Map — create_keyboard_map","text":"scale_table output create_scale_table middle_c_octave octave number middle C. varying conventions octave number middle C. default function 4, software can use 3 even number","code":""},{"path":"/reference/create_keyboard_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Keyboard Map — create_keyboard_map","text":"keyboard map. data.table eight columns: note_number: MIDI note number .NN_MIN .NN_MAX note_name: note name ratio_frac: ratio note vulgar fraction octave: octave number note degree: scale degree note freq: frequency Hz cents: cents default MIDI note .NN_MIN, frequency .FREQ_MIN. name_12edo: note name key 12EDO","code":""},{"path":"/reference/create_keyboard_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Keyboard Map — create_keyboard_map","text":"function currently hard-coded compute map middle C frequency .FREQ_MIDDLE_Cis mapped MIDI note number .NN_MIDDLE_C scale degree 0. current constants 12EDO A440 note 69. note 6000 cents MIDI note number 0.","code":""},{"path":"/reference/create_keyboard_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Keyboard Map — create_keyboard_map","text":"","code":"if (FALSE) {  hexany_harmonics <- c(1, 3, 5, 7) hexany_choose = 2 hexany <- create_scale_table(hexany_harmonics, hexany_choose) print(hexany_keyboard_map <- create_keyboard_map(hexany)) dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 dekany <- create_scale_table(dekany_harmonics, dekany_choose) print(dekany_keyboard_map <- create_keyboard_map(dekany)) print(   vanilla_keyboard_map <- create_keyboard_map(create_12edo_scale_table()) ) print(   eikosany_keyboard_map_c3 <-     create_keyboard_map(create_scale_table(), middle_c_octave = 3) ) }"},{"path":"/reference/create_minilogue_xd_scale_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"Writes Scala .scl file Korg Minilogue XD","code":""},{"path":"/reference/create_minilogue_xd_scale_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"","code":"create_minilogue_xd_scale_file(   keyboard_map,   output_file_path,   scale_description = \"'https://algocompsynth.github.io/eikosany/' made this!\" )"},{"path":"/reference/create_minilogue_xd_scale_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"keyboard_map keyboard map created create_keyboard_map output_file_path path file write permission scale_description tell user scale ","code":""},{"path":"/reference/create_minilogue_xd_scale_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"character vector containing data written file. element vector line ASCII text.","code":""},{"path":"/reference/create_minilogue_xd_scale_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"Korg Minilogue XD can microtuned two ways: 1. user octave: octaves synthesizer microtuned using offsets cents 12EDO notes. scales 12 fewer notes, hexany dekany, work, can use key names offsets scale table made create_scale_table. 2. user scale: microtunes whole MIDI keyboard MIDI note numbers zero 127. need use method eikosany. standard process microtune user scale use Korg minilogue xd Sound Librarian. load Scala .scl .kbm file scale want librarian upload synthesizer. theory, Scala files microtonal scale creation tools work. However, 1-3-5-7-9-11 eikosany, mapped middle C keyboard plays 261.625565 Hz, keys mapped match eikosany scale, synthesizer tuned middle C keyboard actually played C two octaves middle C! downloading microtuning synthesizer librarian examining .scl .kbm files, looked like librarian correctly processing input .kbm file. .scl file retrieved synthesizer defined entire mapping synthesizer playing. Technically, .scl file satisfied requirements defined https://www.huygens-fokker.org/scala/scl_format.html. .scl file downloaded synthesizer defined \"octave\" 128 notes, notes specified cents default MIDI note zero. low C - 8.175799 Hz. prepared .scl file cents note zero uploaded synthesizer without .kbm file. correctly microtuned middle C notes nearby checked. check whole keyboard, near can tell correct except note zero. .scl file specify value note retains default pitch 8.175799 Hz. function , , creates .scl file keyboard map table. FAQ: Yes, ugly hack. , accept issues . Yes, tried tools microtune synthesizer via MIDI sysex work. mood troubleshoot Korg Windows MIDI driver issues spending close week troubleshooting sound librarian. Yes, sent email Korg support sound librarian issue. received response acknowledgement email. point run easier tasks try troubleshoot MIDI sysex method. perhaps Korg respond updated sound librarian. Meanwhile, got function making music . Cheers!","code":""},{"path":"/reference/create_minilogue_xd_scale_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"","code":"if (FALSE) {  eikosany_map <- create_keyboard_map(create_scale_table()) create_minilogue_xd_scale_file(   eikosany_map, \"~/test.scl\", \"Eikosany 1-3-5-7-9-11\") }"},{"path":"/reference/create_scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Scale Table — create_scale_table","title":"Create Scale Table — create_scale_table","text":"Creates scale table combination product set definition","code":""},{"path":"/reference/create_scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Scale Table — create_scale_table","text":"","code":"create_scale_table(harmonics = c(1, 3, 5, 7, 9, 11), choose = 3)"},{"path":"/reference/create_scale_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Scale Table — create_scale_table","text":"harmonics vector harmonics use - defaults first six odd numbers, harmonics define 1-3-5-7-9-11 Eikosany. choose number harmonics choose combination - defaults 3, number harmonics combination Eikosany.","code":""},{"path":"/reference/create_scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Scale Table — create_scale_table","text":"data.table ten columns: note_name: product harmonics defines note (character) ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character) ratio_cents: ratio cents (hundredths semitone) degree: scale degree zero (number notes) - 1 key_12EDO: note name closest 12EDO note offset_cents: offset cents key_12EDO","code":""},{"path":"/reference/create_scale_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Scale Table — create_scale_table","text":"Dirtywave M8 (https://cdn.shopify.com/s/files/1/0455/0485/6229/files/m8_operation_manual_v20220621.pdf?v=1655861519, page 24) can use arbitrary scales defined offsets cents 12EDO note. scales 12 fewer notes per octave, can just define scale using key_12EDO offset_cents table. scales 12 notes per octave, need allocate multiple scales M8. may synthesizers can tuned way, M8 one .","code":""},{"path":"/reference/create_scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Scale Table — create_scale_table","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- create_scale_table())  # the 1-3-5-7 Hexany hexany_harmonics <- c(1, 3, 5, 7) hexany_choose = 2 print(hexany <- create_scale_table(hexany_harmonics, hexany_choose))  # the 1-7-9-11-13 2)5 Dekany  dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany <- create_scale_table(dekany_harmonics, dekany_choose))  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- create_scale_table(harmonics_35, choose_35))  }"},{"path":"/reference/interval_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interval Matrix — interval_matrix","title":"Create Interval Matrix — interval_matrix","text":"Creates interval matrix scale table","code":""},{"path":"/reference/interval_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interval Matrix — interval_matrix","text":"","code":"interval_matrix(scale_table)"},{"path":"/reference/interval_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interval Matrix — interval_matrix","text":"scale_table scale table scale_table function","code":""},{"path":"/reference/interval_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interval Matrix — interval_matrix","text":"interval matrix","code":""},{"path":"/reference/interval_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interval Matrix — interval_matrix","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany_interval_matrix <-interval_matrix(scale_table())) }"},{"path":"/reference/scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Scale Table — scale_table","title":"Create Scale Table — scale_table","text":"Creates scale table combination product set definition","code":""},{"path":"/reference/scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Scale Table — scale_table","text":"","code":"scale_table(harmonics = c(1, 3, 5, 7, 9, 11), choose = 3)"},{"path":"/reference/scale_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Scale Table — scale_table","text":"harmonics vector harmonics use - defaults first six odd numbers, harmonics define 1-3-5-7-9-11 Eikosany. choose number harmonics choose combination - defaults 3, number harmonics combination Eikosany.","code":""},{"path":"/reference/scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Scale Table — scale_table","text":"data.table ten columns: product: product harmonics defines note (character) ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character) ratio_cents: ratio cents (hundredths semitone) degree: scale degree zero (number notes) - 1","code":""},{"path":"/reference/scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Scale Table — scale_table","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- scale_table())  # the 1-7-9-11-13 Dekany dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany_1_7_9_11_13 <- scale_table(dekany_harmonics, dekany_choose))  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- scale_table(harmonics_35, choose_35))  }"}]
