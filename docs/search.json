[{"path":"/articles/constructing-the-eikosany.html","id":"create_scale_table-examples","dir":"Articles","previous_headings":"","what":"create_scale_table examples","title":"Constructing the Eikosany","text":"","code":"# 12EDO scale table print(vanilla <- create_12edo_scale_table()) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset #>  1:        C  1.000000          1           0      0        C       0 #>  2:        C# 1.059463  1461/1379         100      1        C#      0 #>  3:        D  1.122462  1714/1527         200      2        D       0 #>  4:        D# 1.189207  1785/1501         300      3        D#      0 #>  5:        E  1.259921    635/504         400      4        E       0 #>  6:        F  1.334840  3249/2434         500      5        F       0 #>  7:        F# 1.414214   1393/985         600      6        F#      0 #>  8:        G  1.498307  2213/1477         700      7        G       0 #>  9:        G# 1.587401   1008/635         800      8        G#      0 #> 10:        A  1.681793  3002/1785         900      9        A       0 #> 11:        A# 1.781797   1527/857        1000     10        A#      0 #> 12:        B  1.887749  2943/1559        1100     11        B       0  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- create_scale_table()) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #>  1:     1x3x5 1.000000          1     0.00000      0        C      0.000000 #>  2:    5x9x11 1.031250      33/32    53.27294      1        C#   -46.727057 #>  3:     1x7x9 1.050000      21/20    84.46719      2        C#   -15.532807 #>  4:    1x3x11 1.100000      11/10   165.00423      3        D    -34.995772 #>  5:     3x5x9 1.125000        9/8   203.91000      4        D      3.910002 #>  6:     1x5x7 1.166667        7/6   266.87091      5        D#   -33.129094 #>  7:    3x9x11 1.237500      99/80   368.91423      6        E    -31.085770 #>  8:    1x7x11 1.283333      77/60   431.87513      7        E     31.875134 #>  9:     5x7x9 1.312500      21/16   470.78091      8        F    -29.219093 #> 10:    3x5x11 1.375000       11/8   551.31794      9        F#   -48.682058 #> 11:     1x3x7 1.400000        7/5   582.51219     10        F#   -17.487807 #> 12:    7x9x11 1.443750    231/160   635.78514     11        F#    35.785136 #> 13:     1x5x9 1.500000        3/2   701.95500     12        G      1.955001 #> 14:     3x7x9 1.575000      63/40   786.42219     13        G#   -13.577806 #> 15:    5x7x11 1.604167      77/48   818.18885     14        G#    18.188848 #> 16:    1x9x11 1.650000      33/20   866.95923     15        A    -33.040771 #> 17:     3x5x7 1.750000        7/4   968.82591     16        A#   -31.174094 #> 18:     1x3x9 1.800000        9/5  1017.59629     17        A#    17.596288 #> 19:    1x5x11 1.833333       11/6  1049.36294     18        A#    49.362941 #> 20:    3x7x11 1.925000      77/40  1133.83013     19        B     33.830135  # the 1-3-5-7 Hexany hexany_harmonics <- c(1, 3, 5, 7) hexany_choose = 2 print(hexany <- create_scale_table(hexany_harmonics, hexany_choose)) #>    note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #> 1:       1x3 1.000000          1      0.0000      0        C       0.00000 #> 2:       1x7 1.166667        7/6    266.8709      1        D#    -33.12909 #> 3:       3x5 1.250000        5/4    386.3137      2        E     -13.68629 #> 4:       5x7 1.458333      35/24    653.1846      3        G     -46.81538 #> 5:       1x5 1.666667        5/3    884.3587      4        A     -15.64129 #> 6:       3x7 1.750000        7/4    968.8259      5        A#    -31.17409  # the 1-7-9-11-13 2)5 Dekany dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany <- create_scale_table(dekany_harmonics, dekany_choose)) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #>  1:       1x7 1.000000          1     0.00000      0        C      0.000000 #>  2:      9x13 1.044643    117/112    75.61176      1        C#   -24.388243 #>  3:       7x9 1.125000        9/8   203.91000      2        D      3.910002 #>  4:     11x13 1.276786    143/112   423.01970      3        E     23.019698 #>  5:       1x9 1.285714        9/7   435.08410      4        E     35.084095 #>  6:      7x11 1.375000       11/8   551.31794      5        F#   -48.682058 #>  7:      1x11 1.571429       11/7   782.49204      6        G#   -17.507964 #>  8:      7x13 1.625000       13/8   840.52766      7        G#    40.527662 #>  9:      9x11 1.767857      99/56   986.40204      8        A#   -13.597962 #> 10:      1x13 1.857143       13/7  1071.70176      9        B    -28.298245  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- create_scale_table(harmonics_35, choose_35)) #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents #>  1:     1x3x5 1.000000          1     0.00000      0        C      0.000000 #>  2:    5x9x11 1.031250      33/32    53.27294      1        C#   -46.727057 #>  3:   7x11x13 1.042708   1001/960    72.40280      2        C#   -27.597204 #>  4:     1x7x9 1.050000      21/20    84.46719      3        C#   -15.532807 #>  5:    1x5x13 1.083333      13/12   138.57266      4        C#    38.572661 #>  6:    1x3x11 1.100000      11/10   165.00423      5        D    -34.995772 #>  7:     3x5x9 1.125000        9/8   203.91000      6        D      3.910002 #>  8:    3x7x13 1.137500      91/80   223.03985      7        D     23.039854 #>  9:     1x5x7 1.166667        7/6   266.87091      8        D#   -33.129094 #> 10:   1x11x13 1.191667    143/120   303.57689      9        D#     3.576889 #> 11:    5x9x13 1.218750      39/32   342.48266     10        D#    42.482663 #> 12:    3x9x11 1.237500      99/80   368.91423     11        E    -31.085770 #> 13:    1x7x11 1.283333      77/60   431.87513     12        E     31.875134 #> 14:    1x3x13 1.300000      13/10   454.21395     13        F    -45.786052 #> 15:     5x7x9 1.312500      21/16   470.78091     14        F    -29.219093 #> 16:   9x11x13 1.340625    429/320   507.48689     15        F      7.486891 #> 17:    3x5x11 1.375000       11/8   551.31794     16        F#   -48.682058 #> 18:     1x3x7 1.400000        7/5   582.51219     17        F#   -17.487807 #> 19:    7x9x11 1.443750    231/160   635.78514     18        F#    35.785136 #> 20:    3x9x13 1.462500     117/80   658.12395     19        G    -41.876050 #> 21:   5x11x13 1.489583     143/96   689.89060     20        G    -10.109397 #> 22:     1x5x9 1.500000        3/2   701.95500     21        G      1.955001 #> 23:    1x7x13 1.516667      91/60   721.08485     22        G     21.084854 #> 24:     3x7x9 1.575000      63/40   786.42219     23        G#   -13.577806 #> 25:    5x7x11 1.604167      77/48   818.18885     24        G#    18.188848 #> 26:    3x5x13 1.625000       13/8   840.52766     25        G#    40.527662 #> 27:    1x9x11 1.650000      33/20   866.95923     26        A    -33.040771 #> 28:    7x9x13 1.706250    273/160   924.99486     27        A     24.994855 #> 29:     3x5x7 1.750000        7/4   968.82591     28        A#   -31.174094 #> 30:   3x11x13 1.787500     143/80  1005.53189     29        A#     5.531890 #> 31:     1x3x9 1.800000        9/5  1017.59629     30        A#    17.596288 #> 32:    1x5x11 1.833333       11/6  1049.36294     31        A#    49.362941 #> 33:    5x7x13 1.895833      91/48  1107.39857     32        B      7.398567 #> 34:    3x7x11 1.925000      77/40  1133.83013     33        B     33.830135 #> 35:    1x9x13 1.950000      39/20  1156.16895     34        B     56.168949 #>     note_name    ratio ratio_frac ratio_cents degree key_12EDO offset_cents"},{"path":"/articles/constructing-the-eikosany.html","id":"interval-matrix-example","dir":"Articles","previous_headings":"","what":"Interval matrix example","title":"Constructing the Eikosany","text":"","code":"# the 1-3-5-7 Hexany print(hexany_interval_matrix <-create_interval_matrix(hexany)) #>      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  #> [1,]     1   6/7   4/5 24/35   3/5   4/7 #> [2,]   7/6     1 14/15   4/5  7/10   2/3 #> [3,]   5/4 15/14     1   6/7   3/4   5/7 #> [4,] 35/24   5/4   7/6     1   7/8   5/6 #> [5,]   5/3  10/7   4/3   8/7     1 20/21 #> [6,]   7/4   3/2   7/5   6/5 21/20     1"},{"path":"/articles/constructing-the-eikosany.html","id":"tetrads-of-the-eikosany","dir":"Articles","previous_headings":"","what":"Tetrads of the eikosany","title":"Constructing the Eikosany","text":"","code":"# compute the tetrads of the 1-3-5-7-9-11 Eikosany print(eikosany_chords <- create_chord_table(eikosany, 4)) #>            chord     degrees #>  1:      1:3:5:7   1:6:11:15 #>  2:      1:3:5:9  7:11:14:19 #>  3:     1:3:5:11   2:8:11:13 #>  4:      1:3:7:9   1:9:14:18 #>  5:     1:3:7:11    1:4:8:12 #>  6:     1:3:9:11   5:8:14:16 #>  7:      1:5:7:9    3:6:9:19 #>  8:     1:5:7:11   4:6:13:17 #>  9:     1:5:9:11 10:13:16:19 #> 10:     1:7:9:11    0:4:9:16 #> 11:      3:5:7:9   3:7:15:18 #> 12:     3:5:7:11  2:12:15:17 #> 13:     3:5:9:11    2:5:7:10 #> 14:     3:7:9:11   0:5:12:18 #> 15:     5:7:9:11   0:3:10:17 #> 16:  /1:/3:/5:/7   0:5:10:16 #> 17:  /1:/3:/5:/9   0:4:12:17 #> 18: /1:/3:/5:/11    0:3:9:18 #> 19:  /1:/3:/7:/9  2:10:13:17 #> 20: /1:/3:/7:/11   3:7:10:19 #> 21: /1:/3:/9:/11   3:6:15:17 #> 22:  /1:/5:/7:/9    2:5:8:12 #> 23: /1:/5:/7:/11   5:7:14:18 #> 24: /1:/5:/9:/11  1:12:15:18 #> 25: /1:/7:/9:/11   2:7:11:15 #> 26:  /3:/5:/7:/9   4:8:13:16 #> 27: /3:/5:/7:/11  9:14:16:19 #> 28: /3:/5:/9:/11     1:4:6:9 #> 29: /3:/7:/9:/11  6:11:13:19 #> 30: /5:/7:/9:/11   1:8:11:14 #>            chord     degrees"},{"path":"/articles/constructing-the-eikosany.html","id":"keyboard-map-examples","dir":"Articles","previous_headings":"","what":"Keyboard map examples","title":"Constructing the Eikosany","text":"","code":"hexany <- create_scale_table(hexany_harmonics, hexany_choose) print(hexany_keyboard_map <- create_keyboard_map(hexany)) #>      note_number note_name octave degree         freq cents #>   1:           0       1x3     -6      0     8.175799     0 #>   2:           1       1x7     -6      1     8.175799     0 #>   3:           2       3x5     -6      2     8.175799     0 #>   4:           3       5x7     -6      3     8.175799     0 #>   5:           4       1x5     -6      4     8.175799     0 #>  ---                                                        #> 124:         123       5x7     14      3 12543.853951 12700 #> 125:         124       1x5     14      4 12543.853951 12700 #> 126:         125       3x7     14      5 12543.853951 12700 #> 127:         126       1x3     15      0 12543.853951 12700 #> 128:         127       1x7     15      1 12543.853951 12700 print(dekany_keyboard_map <- create_keyboard_map(dekany)) #>      note_number note_name octave degree         freq cents #>   1:           0       1x7     -2      0     8.175799     0 #>   2:           1      9x13     -2      1     8.175799     0 #>   3:           2       7x9     -2      2     8.175799     0 #>   4:           3     11x13     -2      3     8.175799     0 #>   5:           4       1x9     -2      4     8.175799     0 #>  ---                                                        #> 124:         123     11x13     10      3 12543.853951 12700 #> 125:         124       1x9     10      4 12543.853951 12700 #> 126:         125      7x11     10      5 12543.853951 12700 #> 127:         126      1x11     10      6 12543.853951 12700 #> 128:         127      7x13     10      7 12543.853951 12700 print(vanilla_keyboard_map <- create_keyboard_map(vanilla)) #>      note_number note_name octave degree         freq cents #>   1:           0        C      -1      0     8.175799     0 #>   2:           1        C#     -1      1     8.661957   100 #>   3:           2        D      -1      2     9.177024   200 #>   4:           3        D#     -1      3     9.722718   300 #>   5:           4        E      -1      4    10.300861   400 #>  ---                                                        #> 124:         123        D#      9      3  9956.063479 12300 #> 125:         124        E       9      4 10548.081821 12400 #> 126:         125        F       9      5 11175.303406 12500 #> 127:         126        F#      9      6 11839.821527 12600 #> 128:         127        G       9      7 12543.853951 12700 print(eikosany_keyboard_map_c3 <-   create_keyboard_map(eikosany, middle_c_octave = 3) ) #>      note_number note_name octave degree       freq     cents #>   1:           0     1x3x5      0      0   32.70320  2400.000 #>   2:           1    5x9x11      0      1   33.72517  2453.273 #>   3:           2     1x7x9      0      2   34.33836  2484.467 #>   4:           3    1x3x11      0      3   35.97352  2565.004 #>   5:           4     3x5x9      0      4   36.79110  2603.910 #>  ---                                                          #> 124:         123    1x3x11      6      3 2302.30497  9765.004 #> 125:         124     3x5x9      6      4 2354.63009  9803.910 #> 126:         125     1x5x7      6      5 2441.83861  9866.871 #> 127:         126    3x9x11      6      6 2590.09310  9968.914 #> 128:         127    1x7x11      6      7 2686.02247 10031.875"},{"path":[]},{"path":"/articles/cps-on-the-minilogue-xd.html","id":"the-korg-minilogue-xd","dir":"Articles","previous_headings":"","what":"The Korg Minilogue XD","title":"Combination Product Sets on the Korg Minilogue XD","text":"Korg Minilogue XD digital-controlled four-voice analogue synthesizer added digital multi-engine provides digital signal processing capabilities - oscillators, filters, effects. Minilogue XD comes two form factors - synthesizer 37-key keyboard module without keyboard. Sound Librarian managing sound programs multi-engine software Minilogue XD, Software Development Kit - logue SDK developing multi-engine software. Minilogue XD Minilogue XD Module can microtuned arbitrary scales two ways: user octaves, user scales (Korg 2019). methods can implemented directly device uploaded device Sound Librarian. user octave method can used scale 12 fewer notes per octave. octave whole range instrument tuned settings, expressed offsets cents standard 12 equal divisions octave (12EDO) tuning. Thus, can tune Minilogue XD Minilogue XD Module Hexany (Narushima 2019, 151) Dekany (Narushima 2019, 160) user octaves, using output create_cps_scale_table.","code":""},{"path":"/articles/cps-on-the-minilogue-xd.html","id":"hexany","dir":"Articles","previous_headings":"The Korg Minilogue XD","what":"1-3-5-7 Hexany","title":"Combination Product Sets on the Korg Minilogue XD","text":"","code":"hexany <- create_cps_scale_table(harmonics = c(1, 3, 5, 7), choose = 2) print(hexany) #>    note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #> 1:       1x3 1.000000          1      0.0000             NA      0        C  #> 2:       1x7 1.166667        7/6    266.8709      266.87091      1        D# #> 3:       3x5 1.250000        5/4    386.3137      119.44281      2        E  #> 4:       5x7 1.458333      35/24    653.1846      266.87091      3        G  #> 5:       1x5 1.666667        5/3    884.3587      231.17409      4        A  #> 6:       3x7 1.750000        7/4    968.8259       84.46719      5        A# #>    offset_cents #> 1:      0.00000 #> 2:    -33.12909 #> 3:    -13.68629 #> 4:    -46.81538 #> 5:    -15.64129 #> 6:    -31.17409"},{"path":"/articles/cps-on-the-minilogue-xd.html","id":"dekany","dir":"Articles","previous_headings":"The Korg Minilogue XD","what":"1-3-5-7-9 2)5 Dekany","title":"Combination Product Sets on the Korg Minilogue XD","text":"","code":"dekany <- create_cps_scale_table(harmonics = c(1, 3, 5, 7, 9), choose = 2) print(dekany) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:       1x3 1.000000          1      0.0000             NA      0        C  #>  2:       3x9 1.125000        9/8    203.9100      203.91000      1        D  #>  3:       1x7 1.166667        7/6    266.8709       62.96090      2        D# #>  4:       3x5 1.250000        5/4    386.3137      119.44281      3        E  #>  5:       7x9 1.312500      21/16    470.7809       84.46719      4        F  #>  6:       5x7 1.458333      35/24    653.1846      182.40371      5        G  #>  7:       1x9 1.500000        3/2    701.9550       48.77038      6        G  #>  8:       1x5 1.666667        5/3    884.3587      182.40371      7        A  #>  9:       3x7 1.750000        7/4    968.8259       84.46719      8        A# #> 10:       5x9 1.875000       15/8   1088.2687      119.44281      9        B  #>     offset_cents #>  1:     0.000000 #>  2:     3.910002 #>  3:   -33.129094 #>  4:   -13.686286 #>  5:   -29.219093 #>  6:   -46.815381 #>  7:     1.955001 #>  8:   -15.641287 #>  9:   -31.174094 #> 10:   -11.731285"},{"path":"/articles/cps-on-the-minilogue-xd.html","id":"user-scales-and-eikosanies","dir":"Articles","previous_headings":"","what":"User scales and Eikosanies","title":"Combination Product Sets on the Korg Minilogue XD","text":"User scales retune entire range device - MIDI note numbers zero 127 - pitches, represented offset cents standard 12EDO key. Since Eikosany (Narushima 2019, 161) 20 notes octave, can’t retune Minilogue XD / XD Module Eikosany user octaves - use user scales.","code":""},{"path":[]},{"path":"/articles/run-the-examples.html","id":"create_cps_scale_table-examples","dir":"Articles","previous_headings":"","what":"create_cps_scale_table examples","title":"Run the Examples","text":"","code":"# EDO scale tables print(vanilla <- create_edo_scale_table()) # default is 12EDO, of course #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:        C  1.000000          1           0             NA      0        C  #>  2:        C# 1.059463  1461/1379         100            100      1        C# #>  3:        D  1.122462  1714/1527         200            100      2        D  #>  4:        D# 1.189207  1785/1501         300            100      3        D# #>  5:        E  1.259921    635/504         400            100      4        E  #>  6:        F  1.334840  3249/2434         500            100      5        F  #>  7:        F# 1.414214   1393/985         600            100      6        F# #>  8:        G  1.498307  2213/1477         700            100      7        G  #>  9:        G# 1.587401   1008/635         800            100      8        G# #> 10:        A  1.681793  3002/1785         900            100      9        A  #> 11:        A# 1.781797   1527/857        1000            100     10        A# #> 12:        B  1.887749  2943/1559        1100            100     11        B  #>     offset_cents #>  1:            0 #>  2:            0 #>  3:            0 #>  4:            0 #>  5:            0 #>  6:            0 #>  7:            0 #>  8:            0 #>  9:            0 #> 10:            0 #> 11:            0 #> 12:            0  nn19 <- c(   \"C \",   \"C+\",   \"D-\",   \"D \",   \"D+\",   \"E-\",   \"E \",   \"E+\",   \"F \",   \"F+\",   \"G-\",   \"G \",   \"G+\",   \"A-\",   \"A \",   \"A+\",   \"B-\",   \"B \",   \"B+\") print(length(nn19)) #> [1] 19 print(nn19) #>  [1] \"C \" \"C+\" \"D-\" \"D \" \"D+\" \"E-\" \"E \" \"E+\" \"F \" \"F+\" \"G-\" \"G \" \"G+\" \"A-\" \"A \" #> [16] \"A+\" \"B-\" \"B \" \"B+\" print(edo19 <- create_edo_scale_table(nn19)) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:        C  1.000000          1     0.00000             NA      0        C  #>  2:        C+ 1.037155    977/942    63.15789       63.15789      1        C# #>  3:        D- 1.075691    739/687   126.31579       63.15789      2        C# #>  4:        D  1.115658    627/562   189.47368       63.15789      3        D  #>  5:        D+ 1.157110   1009/872   252.63158       63.15789      4        D# #>  6:        E- 1.200103  2333/1944   315.78947       63.15789      5        D# #>  7:        E  1.244693   1114/895   378.94737       63.15789      6        E  #>  8:        E+ 1.290939  1553/1203   442.10526       63.15789      7        E  #>  9:        F  1.338904  1442/1077   505.26316       63.15789      8        F  #> 10:        F+ 1.388651   1297/934   568.42105       63.15789      9        F# #> 11:        G- 1.440247  1639/1138   631.57895       63.15789     10        F# #> 12:        G  1.493759   1077/721   694.73684       63.15789     11        G  #> 13:        G+ 1.549260  2406/1553   757.89474       63.15789     12        G# #> 14:        A- 1.606822    895/557   821.05263       63.15789     13        G# #> 15:        A  1.666524  3893/2336   884.21053       63.15789     14        A  #> 16:        A+ 1.728444  1744/1009   947.36842       63.15789     15        A  #> 17:        B- 1.792664   1124/627  1010.52632       63.15789     16        A# #> 18:        B  1.859271   1123/604  1073.68421       63.15789     17        B  #> 19:        B+ 1.928352   1884/977  1136.84211       63.15789     18        B  #>     offset_cents #>  1:     0.000000 #>  2:   -36.842105 #>  3:    26.315789 #>  4:   -10.526316 #>  5:   -47.368421 #>  6:    15.789474 #>  7:   -21.052632 #>  8:    42.105263 #>  9:     5.263158 #> 10:   -31.578947 #> 11:    31.578947 #> 12:    -5.263158 #> 13:   -42.105263 #> 14:    21.052632 #> 15:   -15.789474 #> 16:    47.368421 #> 17:    10.526316 #> 18:   -26.315789 #> 19:    36.842105  nn31 <- c(   \"C  \",   \"C+ \",   \"C++\",   \"D--\",   \"D- \",   \"D  \",   \"D+ \",   \"D++\",   \"E--\",   \"E- \",   \"E  \",   \"F--\",   \"E++\",   \"F  \",   \"F+ \",   \"F++\",   \"G--\",   \"G- \",   \"G  \",   \"G+ \",   \"G++\",   \"A--\",   \"A- \",   \"A  \",   \"A+ \",   \"A++\",   \"B--\",   \"B- \",   \"B  \",   \"C--\",   \"B++\") print(length(nn31)) #> [1] 31 print(nn31) #>  [1] \"C  \" \"C+ \" \"C++\" \"D--\" \"D- \" \"D  \" \"D+ \" \"D++\" \"E--\" \"E- \" \"E  \" \"F--\" #> [13] \"E++\" \"F  \" \"F+ \" \"F++\" \"G--\" \"G- \" \"G  \" \"G+ \" \"G++\" \"A--\" \"A- \" \"A  \" #> [25] \"A+ \" \"A++\" \"B--\" \"B- \" \"B  \" \"C--\" \"B++\" print(edo31 <- create_edo_scale_table(nn31)) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:       C   1.000000          1     0.00000             NA      0        C  #>  2:       C+  1.022611  1402/1371    38.70968       38.70968      1        C  #>  3:       C++ 1.045734  1189/1137    77.41935       38.70968      2        C# #>  4:       D-- 1.069380  1156/1081   116.12903       38.70968      3        C# #>  5:       D-  1.093560    900/823   154.83871       38.70968      4        D  #>  6:       D   1.118287  1645/1471   193.54839       38.70968      5        D  #>  7:       D+  1.143573    685/599   232.25806       38.70968      6        D  #>  8:       D++ 1.169431    987/844   270.96774       38.70968      7        D# #>  9:       E-- 1.195873  3999/3344   309.67742       38.70968      8        D# #> 10:       E-  1.222914    982/803   348.38710       38.70968      9        D# #> 11:       E   1.250566  2211/1768   387.09677       38.70968     10        E  #> 12:       F-- 1.278843  3403/2661   425.80645       38.70968     11        E  #> 13:       E++ 1.307759  1500/1147   464.51613       38.70968     12        F  #> 14:       F   1.337329    781/584   503.22581       38.70968     13        F  #> 15:       F+  1.367568    253/185   541.93548       38.70968     14        F  #> 16:       F++ 1.398491  1853/1325   580.64516       38.70968     15        F# #> 17:       G-- 1.430113  2783/1946   619.35484       38.70968     16        F# #> 18:       G-  1.462450    370/253   658.06452       38.70968     17        G  #> 19:       G   1.495518   1168/781   696.77419       38.70968     18        G  #> 20:       G+  1.529334   1147/750   735.48387       38.70968     19        G  #> 21:       G++ 1.563914  2557/1635   774.19355       38.70968     20        G# #> 22:       A-- 1.599276  3536/2211   812.90323       38.70968     21        G# #> 23:       A-  1.635438    803/491   851.61290       38.70968     22        A  #> 24:       A   1.672418  6785/4057   890.32258       38.70968     23        A  #> 25:       A+  1.710234   1387/811   929.03226       38.70968     24        A  #> 26:       A++ 1.748905   1198/685   967.74194       38.70968     25        A# #> 27:       B-- 1.788450  2942/1645  1006.45161       38.70968     26        A# #> 28:       B-  1.828889    823/450  1045.16129       38.70968     27        A# #> 29:       B   1.870243   1081/578  1083.87097       38.70968     28        B  #> 30:       C-- 1.912532   1465/766  1122.58065       38.70968     29        B  #> 31:       B++ 1.955777   1371/701  1161.29032       38.70968     30        B  #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>     offset_cents #>  1:     0.000000 #>  2:    38.709677 #>  3:   -22.580645 #>  4:    16.129032 #>  5:   -45.161290 #>  6:    -6.451613 #>  7:    32.258065 #>  8:   -29.032258 #>  9:     9.677419 #> 10:    48.387097 #> 11:   -12.903226 #> 12:    25.806452 #> 13:   -35.483871 #> 14:     3.225806 #> 15:    41.935484 #> 16:   -19.354839 #> 17:    19.354839 #> 18:   -41.935484 #> 19:    -3.225806 #> 20:    35.483871 #> 21:   -25.806452 #> 22:    12.903226 #> 23:   -48.387097 #> 24:    -9.677419 #> 25:    29.032258 #> 26:   -32.258065 #> 27:     6.451613 #> 28:    45.161290 #> 29:   -16.129032 #> 30:    22.580645 #> 31:    61.290323 #>     offset_cents  nn22 <- c(   \"C  \",   \"C+ \",   \"C++\",   \"D- \",   \"D  \",   \"D+ \",   \"D++\",   \"E- \",   \"E  \",   \"F  \",   \"F+ \",   \"F++\",   \"G- \",   \"G  \",   \"G+ \",   \"G++\",   \"A- \",   \"A  \",   \"A+ \",   \"A++\",   \"B- \",   \"B  \") print(length(nn22)) #> [1] 22 print(nn22) #>  [1] \"C  \" \"C+ \" \"C++\" \"D- \" \"D  \" \"D+ \" \"D++\" \"E- \" \"E  \" \"F  \" \"F+ \" \"F++\" #> [13] \"G- \" \"G  \" \"G+ \" \"G++\" \"A- \" \"A  \" \"A+ \" \"A++\" \"B- \" \"B  \" print(edo22 <- create_edo_scale_table(nn22)) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:       C   1.000000          1     0.00000             NA      0        C  #>  2:       C+  1.032008    935/906    54.54545       54.54545      1        C# #>  3:       C++ 1.065041    131/123   109.09091       54.54545      2        C# #>  4:       D-  1.099131    632/575   163.63636       54.54545      3        D  #>  5:       D   1.134313   1081/953   218.18182       54.54545      4        D  #>  6:       D+  1.170620  1283/1096   272.72727       54.54545      5        D# #>  7:       D++ 1.208089  2270/1879   327.27273       54.54545      6        D# #>  8:       E-  1.246758  3173/2545   381.81818       54.54545      7        E  #>  9:       E   1.286665  4834/3757   436.36364       54.54545      8        E  #> 10:       F   1.327849   1049/790   490.90909       54.54545      9        F  #> 11:       F+  1.370351  2616/1909   545.45455       54.54545     10        F  #> 12:       F++ 1.414214   1393/985   600.00000       54.54545     11        F# #> 13:       G-  1.459480  1909/1308   654.54545       54.54545     12        G  #> 14:       G   1.506196    851/565   709.09091       54.54545     13        G  #> 15:       G+  1.554406  3757/2417   763.63636       54.54545     14        G# #> 16:       G++ 1.604160  5090/3173   818.18182       54.54545     15        G# #> 17:       A-  1.655507  1879/1135   872.72727       54.54545     16        A  #> 18:       A   1.708496   1307/765   927.27273       54.54545     17        A  #> 19:       A+  1.763183  1839/1043   981.81818       54.54545     18        A# #> 20:       A++ 1.819619  3914/2151  1036.36364       54.54545     19        A# #> 21:       B-  1.877862    246/131  1090.90909       54.54545     20        B  #> 22:       B   1.937969   1031/532  1145.45455       54.54545     21        B  #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>     offset_cents #>  1:     0.000000 #>  2:   -45.454545 #>  3:     9.090909 #>  4:   -36.363636 #>  5:    18.181818 #>  6:   -27.272727 #>  7:    27.272727 #>  8:   -18.181818 #>  9:    36.363636 #> 10:    -9.090909 #> 11:    45.454545 #> 12:     0.000000 #> 13:   -45.454545 #> 14:     9.090909 #> 15:   -36.363636 #> 16:    18.181818 #> 17:   -27.272727 #> 18:    27.272727 #> 19:   -18.181818 #> 20:    36.363636 #> 21:    -9.090909 #> 22:    45.454545 #>     offset_cents  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- create_cps_scale_table()) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:     1x3x5 1.000000          1     0.00000             NA      0        C  #>  2:    5x9x11 1.031250      33/32    53.27294       53.27294      1        C# #>  3:     1x7x9 1.050000      21/20    84.46719       31.19425      2        C# #>  4:    1x3x11 1.100000      11/10   165.00423       80.53704      3        D  #>  5:     3x5x9 1.125000        9/8   203.91000       38.90577      4        D  #>  6:     1x5x7 1.166667        7/6   266.87091       62.96090      5        D# #>  7:    3x9x11 1.237500      99/80   368.91423      102.04332      6        E  #>  8:    1x7x11 1.283333      77/60   431.87513       62.96090      7        E  #>  9:     5x7x9 1.312500      21/16   470.78091       38.90577      8        F  #> 10:    3x5x11 1.375000       11/8   551.31794       80.53704      9        F# #> 11:     1x3x7 1.400000        7/5   582.51219       31.19425     10        F# #> 12:    7x9x11 1.443750    231/160   635.78514       53.27294     11        F# #> 13:     1x5x9 1.500000        3/2   701.95500       66.16987     12        G  #> 14:     3x7x9 1.575000      63/40   786.42219       84.46719     13        G# #> 15:    5x7x11 1.604167      77/48   818.18885       31.76665     14        G# #> 16:    1x9x11 1.650000      33/20   866.95923       48.77038     15        A  #> 17:     3x5x7 1.750000        7/4   968.82591      101.86668     16        A# #> 18:     1x3x9 1.800000        9/5  1017.59629       48.77038     17        A# #> 19:    1x5x11 1.833333       11/6  1049.36294       31.76665     18        A# #> 20:    3x7x11 1.925000      77/40  1133.83013       84.46719     19        B  #>     offset_cents #>  1:     0.000000 #>  2:   -46.727057 #>  3:   -15.532807 #>  4:   -34.995772 #>  5:     3.910002 #>  6:   -33.129094 #>  7:   -31.085770 #>  8:    31.875134 #>  9:   -29.219093 #> 10:   -48.682058 #> 11:   -17.487807 #> 12:    35.785136 #> 13:     1.955001 #> 14:   -13.577806 #> 15:    18.188848 #> 16:   -33.040771 #> 17:   -31.174094 #> 18:    17.596288 #> 19:    49.362941 #> 20:    33.830135  # the 1-3-5-7 Hexany hexany_harmonics <- c(1, 3, 5, 7) hexany_choose = 2 print(hexany <- create_cps_scale_table(hexany_harmonics, hexany_choose)) #>    note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #> 1:       1x3 1.000000          1      0.0000             NA      0        C  #> 2:       1x7 1.166667        7/6    266.8709      266.87091      1        D# #> 3:       3x5 1.250000        5/4    386.3137      119.44281      2        E  #> 4:       5x7 1.458333      35/24    653.1846      266.87091      3        G  #> 5:       1x5 1.666667        5/3    884.3587      231.17409      4        A  #> 6:       3x7 1.750000        7/4    968.8259       84.46719      5        A# #>    offset_cents #> 1:      0.00000 #> 2:    -33.12909 #> 3:    -13.68629 #> 4:    -46.81538 #> 5:    -15.64129 #> 6:    -31.17409  # the 1-7-9-11-13 2)5 Dekany dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany <- create_cps_scale_table(dekany_harmonics, dekany_choose)) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:       1x7 1.000000          1     0.00000             NA      0        C  #>  2:      9x13 1.044643    117/112    75.61176       75.61176      1        C# #>  3:       7x9 1.125000        9/8   203.91000      128.29824      2        D  #>  4:     11x13 1.276786    143/112   423.01970      219.10970      3        E  #>  5:       1x9 1.285714        9/7   435.08410       12.06440      4        E  #>  6:      7x11 1.375000       11/8   551.31794      116.23385      5        F# #>  7:      1x11 1.571429       11/7   782.49204      231.17409      6        G# #>  8:      7x13 1.625000       13/8   840.52766       58.03563      7        G# #>  9:      9x11 1.767857      99/56   986.40204      145.87438      8        A# #> 10:      1x13 1.857143       13/7  1071.70176       85.29972      9        B  #>     offset_cents #>  1:     0.000000 #>  2:   -24.388243 #>  3:     3.910002 #>  4:    23.019698 #>  5:    35.084095 #>  6:   -48.682058 #>  7:   -17.507964 #>  8:    40.527662 #>  9:   -13.597962 #> 10:   -28.298245  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- create_cps_scale_table(harmonics_35, choose_35)) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:     1x3x5 1.000000          1     0.00000             NA      0        C  #>  2:    5x9x11 1.031250      33/32    53.27294       53.27294      1        C# #>  3:   7x11x13 1.042708   1001/960    72.40280       19.12985      2        C# #>  4:     1x7x9 1.050000      21/20    84.46719       12.06440      3        C# #>  5:    1x5x13 1.083333      13/12   138.57266       54.10547      4        C# #>  6:    1x3x11 1.100000      11/10   165.00423       26.43157      5        D  #>  7:     3x5x9 1.125000        9/8   203.91000       38.90577      6        D  #>  8:    3x7x13 1.137500      91/80   223.03985       19.12985      7        D  #>  9:     1x5x7 1.166667        7/6   266.87091       43.83105      8        D# #> 10:   1x11x13 1.191667    143/120   303.57689       36.70598      9        D# #> 11:    5x9x13 1.218750      39/32   342.48266       38.90577     10        D# #> 12:    3x9x11 1.237500      99/80   368.91423       26.43157     11        E  #> 13:    1x7x11 1.283333      77/60   431.87513       62.96090     12        E  #> 14:    1x3x13 1.300000      13/10   454.21395       22.33881     13        F  #> 15:     5x7x9 1.312500      21/16   470.78091       16.56696     14        F  #> 16:   9x11x13 1.340625    429/320   507.48689       36.70598     15        F  #> 17:    3x5x11 1.375000       11/8   551.31794       43.83105     16        F# #> 18:     1x3x7 1.400000        7/5   582.51219       31.19425     17        F# #> 19:    7x9x11 1.443750    231/160   635.78514       53.27294     18        F# #> 20:    3x9x13 1.462500     117/80   658.12395       22.33881     19        G  #> 21:   5x11x13 1.489583     143/96   689.89060       31.76665     20        G  #> 22:     1x5x9 1.500000        3/2   701.95500       12.06440     21        G  #> 23:    1x7x13 1.516667      91/60   721.08485       19.12985     22        G  #> 24:     3x7x9 1.575000      63/40   786.42219       65.33734     23        G# #> 25:    5x7x11 1.604167      77/48   818.18885       31.76665     24        G# #> 26:    3x5x13 1.625000       13/8   840.52766       22.33881     25        G# #> 27:    1x9x11 1.650000      33/20   866.95923       26.43157     26        A  #> 28:    7x9x13 1.706250    273/160   924.99486       58.03563     27        A  #> 29:     3x5x7 1.750000        7/4   968.82591       43.83105     28        A# #> 30:   3x11x13 1.787500     143/80  1005.53189       36.70598     29        A# #> 31:     1x3x9 1.800000        9/5  1017.59629       12.06440     30        A# #> 32:    1x5x11 1.833333       11/6  1049.36294       31.76665     31        A# #> 33:    5x7x13 1.895833      91/48  1107.39857       58.03563     32        B  #> 34:    3x7x11 1.925000      77/40  1133.83013       26.43157     33        B  #> 35:    1x9x13 1.950000      39/20  1156.16895       22.33881     34        B  #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>     offset_cents #>  1:     0.000000 #>  2:   -46.727057 #>  3:   -27.597204 #>  4:   -15.532807 #>  5:    38.572661 #>  6:   -34.995772 #>  7:     3.910002 #>  8:    23.039854 #>  9:   -33.129094 #> 10:     3.576889 #> 11:    42.482663 #> 12:   -31.085770 #> 13:    31.875134 #> 14:   -45.786052 #> 15:   -29.219093 #> 16:     7.486891 #> 17:   -48.682058 #> 18:   -17.487807 #> 19:    35.785136 #> 20:   -41.876050 #> 21:   -10.109397 #> 22:     1.955001 #> 23:    21.084854 #> 24:   -13.577806 #> 25:    18.188848 #> 26:    40.527662 #> 27:   -33.040771 #> 28:    24.994855 #> 29:   -31.174094 #> 30:     5.531890 #> 31:    17.596288 #> 32:    49.362941 #> 33:     7.398567 #> 34:    33.830135 #> 35:    56.168949 #>     offset_cents"},{"path":"/articles/run-the-examples.html","id":"interval-table-example","dir":"Articles","previous_headings":"","what":"Interval table example","title":"Run the Examples","text":"","code":"print(eikosany_interval_table <-create_interval_table(eikosany)) #>      from_name from_degree to_name to_degree    ratio ratio_frac ratio_cents #>   1:    3x5x11           9   1x3x7        10 1.018182      56/55    31.19425 #>   2:    5x9x11           1   1x7x9         2 1.018182      56/55    31.19425 #>   3:     1x3x9          17  1x5x11        18 1.018519      55/54    31.76665 #>   4:     3x7x9          13  5x7x11        14 1.018519      55/54    31.76665 #>   5:    1x3x11           3   3x5x9         4 1.022727      45/44    38.90577 #>  ---                                                                         #> 186:     1x3x5           0   1x3x9        17 1.800000        9/5  1017.59629 #> 187:     1x3x5           0  1x5x11        18 1.833333       11/6  1049.36294 #> 188:     1x7x9           2  3x7x11        19 1.833333       11/6  1049.36294 #> 189:    5x9x11           1  3x7x11        19 1.866667      28/15  1080.55719 #> 190:     1x3x5           0  3x7x11        19 1.925000      77/40  1133.83013"},{"path":"/articles/run-the-examples.html","id":"chord-table-examples","dir":"Articles","previous_headings":"","what":"Chord table examples","title":"Run the Examples","text":"","code":"# compute the tetrads of the 1-3-5-7-9-11 Eikosany eikosany <- create_cps_scale_table() print(eikosany_chords <- create_chord_table(eikosany)) #>            chord     degrees chord_index is_subharm #>  1:      1:3:5:7   1:6:11:15           1          0 #>  2:  /1:/3:/5:/7   0:5:10:16           1          1 #>  3:      1:3:5:9  7:11:14:19           2          0 #>  4:  /1:/3:/5:/9   0:4:12:17           2          1 #>  5:     1:3:5:11   2:8:11:13           3          0 #>  6: /1:/3:/5:/11    0:3:9:18           3          1 #>  7:      1:3:7:9   1:9:14:18           4          0 #>  8:  /1:/3:/7:/9  2:10:13:17           4          1 #>  9:     1:3:7:11    1:4:8:12           5          0 #> 10: /1:/3:/7:/11   3:7:10:19           5          1 #> 11:     1:3:9:11   5:8:14:16           6          0 #> 12: /1:/3:/9:/11   3:6:15:17           6          1 #> 13:      1:5:7:9    3:6:9:19           7          0 #> 14:  /1:/5:/7:/9    2:5:8:12           7          1 #> 15:     1:5:7:11   4:6:13:17           8          0 #> 16: /1:/5:/7:/11   5:7:14:18           8          1 #> 17:     1:5:9:11 10:13:16:19           9          0 #> 18: /1:/5:/9:/11  1:12:15:18           9          1 #> 19:     1:7:9:11    0:4:9:16          10          0 #> 20: /1:/7:/9:/11   2:7:11:15          10          1 #> 21:      3:5:7:9   3:7:15:18          11          0 #> 22:  /3:/5:/7:/9   4:8:13:16          11          1 #> 23:     3:5:7:11  2:12:15:17          12          0 #> 24: /3:/5:/7:/11  9:14:16:19          12          1 #> 25:     3:5:9:11    2:5:7:10          13          0 #> 26: /3:/5:/9:/11     1:4:6:9          13          1 #> 27:     3:7:9:11   0:5:12:18          14          0 #> 28: /3:/7:/9:/11  6:11:13:19          14          1 #> 29:     5:7:9:11   0:3:10:17          15          0 #> 30: /5:/7:/9:/11   1:8:11:14          15          1 #>            chord     degrees chord_index is_subharm  # compute the pentads of the 1-3-5-7-9-11-13-15 Hebdomekontany hebdomekontany <- create_cps_scale_table(   harmonics = c(1, 3, 5, 7, 9, 11, 13, 15), choose = 4 ) print(hebdomekontany_chords <- create_chord_table(hebdomekontany)) #>                  chord        degrees chord_index is_subharm #>   1:         1:3:5:7:9 11:24:37:47:65           1          0 #>   2:    /1:/3:/5:/7:/9  0:13:26:42:60           1          1 #>   3:        1:3:5:7:11  5:28:37:45:61           2          0 #>   4:   /1:/3:/5:/7:/11   0:9:32:46:62           2          1 #>   5:        1:3:5:7:13 10:29:37:44:57           3          0 #>  ---                                                         #> 108: /5:/7:/11:/13:/15  1:11:40:47:55          54          1 #> 109:      5:9:11:13:15   0:9:27:41:60          55          0 #> 110: /5:/9:/11:/13:/15 10:28:37:47:66          55          1 #> 111:      7:9:11:13:15   0:7:26:46:63          56          0 #> 112: /7:/9:/11:/13:/15 11:30:37:44:61          56          1"},{"path":"/articles/run-the-examples.html","id":"keyboard-map-examples","dir":"Articles","previous_headings":"","what":"Keyboard map examples","title":"Run the Examples","text":"","code":"hexany <- create_cps_scale_table(hexany_harmonics, hexany_choose) print(hexany_keyboard_map <- create_keyboard_map(hexany)) #> Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = #> check.names, : Item 10 has 106 rows but longest item has 128; recycled with #> remainder. #>      note_number key_name key_octave note_name ratio_frac degree octave #>   1:           0       C          -1       1x3          1      0     -6 #>   2:           1       C#         -1       1x7        7/6      1     -6 #>   3:           2       D          -1       3x5        5/4      2     -6 #>   4:           3       D#         -1       5x7      35/24      3     -6 #>   5:           4       E          -1       1x5        5/3      4     -6 #>  ---                                                                    #> 124:         123       D#          9       5x7      35/24      3     14 #> 125:         124       E           9       1x5        5/3      4     14 #> 126:         125       F           9       3x7        7/4      5     14 #> 127:         126       F#          9       1x3          1      0     15 #> 128:         127       G           9       1x7        7/6      1     15 #>              freq cents ref_keyname ref_octave ref_offsets #>   1:     8.175799     0          D          -5           0 #>   2:     8.175799     0          D#         -5         -33 #>   3:     8.175799     0          F#         -5         -14 #>   4:     8.175799     0          G#         -5         -47 #>   5:     8.175799     0          A          -5         -16 #>  ---                                                       #> 124: 12543.853951 12700          F#         15         -47 #> 125: 12543.853951 12700          G#         15         -16 #> 126: 12543.853951 12700          A          15         -31 #> 127: 12543.853951 12700          D          16           0 #> 128: 12543.853951 12700          D#         16         -33 print(dekany_keyboard_map <- create_keyboard_map(dekany)) #> Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = #> check.names, : Item 10 has 115 rows but longest item has 128; recycled with #> remainder. #>      note_number key_name key_octave note_name ratio_frac degree octave #>   1:           0       C          -1       1x7          1      0     -2 #>   2:           1       C#         -1      9x13    117/112      1     -2 #>   3:           2       D          -1       7x9        9/8      2     -2 #>   4:           3       D#         -1     11x13    143/112      3     -2 #>   5:           4       E          -1       1x9        9/7      4     -2 #>  ---                                                                    #> 124:         123       D#          9     11x13    143/112      3     10 #> 125:         124       E           9       1x9        9/7      4     10 #> 126:         125       F           9      7x11       11/8      5     10 #> 127:         126       F#          9      1x11       11/7      6     10 #> 128:         127       G           9      7x13       13/8      7     10 #>              freq cents ref_keyname ref_octave ref_offsets #>   1:     8.175799     0          C          -1           0 #>   2:     8.175799     0          C#         -1         -24 #>   3:     8.175799     0          D#         -1           4 #>   4:     8.175799     0          D#         -1          23 #>   5:     8.175799     0          F          -1          35 #>  ---                                                       #> 124: 12543.853951 12700          A#         11          23 #> 125: 12543.853951 12700          C          11          35 #> 126: 12543.853951 12700          C#         11         -49 #> 127: 12543.853951 12700          D#         11         -18 #> 128: 12543.853951 12700          D#         11          41 print(vanilla_keyboard_map <- create_keyboard_map(vanilla)) #> Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = #> check.names, : Item 10 has 117 rows but longest item has 128; recycled with #> remainder. #>      note_number key_name key_octave note_name ratio_frac degree octave #>   1:           0       C          -1        C           1      0     -1 #>   2:           1       C#         -1        C#  1461/1379      1     -1 #>   3:           2       D          -1        D   1714/1527      2     -1 #>   4:           3       D#         -1        D#  1785/1501      3     -1 #>   5:           4       E          -1        E     635/504      4     -1 #>  ---                                                                    #> 124:         123       D#          9        D#  1785/1501      3      9 #> 125:         124       E           9        E     635/504      4      9 #> 126:         125       F           9        F   3249/2434      5      9 #> 127:         126       F#          9        F#   1393/985      6      9 #> 128:         127       G           9        G   2213/1477      7      9 #>              freq cents ref_keyname ref_octave ref_offsets #>   1:     8.175799     0          C           0           0 #>   2:     8.661957   100          C#          0           0 #>   3:     9.177024   200          D           0           0 #>   4:     9.722718   300          D#          0           0 #>   5:    10.300861   400          E           0           0 #>  ---                                                       #> 124:  9956.063479 12300          F#         10           0 #> 125: 10548.081821 12400          G          10           0 #> 126: 11175.303406 12500          G#         10           0 #> 127: 11839.821527 12600          A          10           0 #> 128: 12543.853951 12700          A#         10           0 print(eikosany_keyboard_map_c3 <-   create_keyboard_map(eikosany, middle_c_octave = 3) ) #> Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = #> check.names, : Item 10 has 121 rows but longest item has 128; recycled with #> remainder. #>      note_number key_name key_octave note_name ratio_frac degree octave #>   1:           0       C          -2     1x3x5          1      0      0 #>   2:           1       C#         -2    5x9x11      33/32      1      0 #>   3:           2       D          -2     1x7x9      21/20      2      0 #>   4:           3       D#         -2    1x3x11      11/10      3      0 #>   5:           4       E          -2     3x5x9        9/8      4      0 #>  ---                                                                    #> 124:         123       D#          8    1x3x11      11/10      3      6 #> 125:         124       E           8     3x5x9        9/8      4      6 #> 126:         125       F           8     1x5x7        7/6      5      6 #> 127:         126       F#          8    3x9x11      99/80      6      6 #> 128:         127       G           8    1x7x11      77/60      7      6 #>            freq     cents ref_keyname ref_octave ref_offsets #>   1:   32.70320  2400.000          C           2           0 #>   2:   33.72517  2453.273          C           2         -47 #>   3:   34.33836  2484.467          C#          2         -16 #>   4:   35.97352  2565.004          C#          2         -35 #>   5:   36.79110  2603.910          D           2           4 #>  ---                                                         #> 124: 2302.30497  9765.004          C#          8         -35 #> 125: 2354.63009  9803.910          C#          8           4 #> 126: 2441.83861  9866.871          D           8         -33 #> 127: 2590.09310  9968.914          D#          8         -31 #> 128: 2686.02247 10031.875          D#          8          32"},{"path":"/articles/run-the-examples.html","id":"minilogue-xd--scl-file-example","dir":"Articles","previous_headings":"","what":"Minilogue XD .scl file example","title":"Run the Examples","text":"","code":"print(eikosany_minilogue_xd_scl_file <- create_minilogue_xd_scale_file(   eikosany_keyboard_map_c3,   \"~/Eikosany-1-3-5-7-9-11.scl\",   \"Eikosany 1-3-5-7-9-11\" )) #>   [1] \"! ~/Eikosany-1-3-5-7-9-11.scl\"             #>   [2] \"Eikosany 1-3-5-7-9-11\"                     #>   [3] \"! number of ratios in scale\"               #>   [4] \"127\"                                       #>   [5] \"! ratios (cents above MIDI note number 0)\" #>   [6] \"2453.000000\"                               #>   [7] \"2484.000000\"                               #>   [8] \"2565.000000\"                               #>   [9] \"2604.000000\"                               #>  [10] \"2667.000000\"                               #>  [11] \"2769.000000\"                               #>  [12] \"2832.000000\"                               #>  [13] \"2871.000000\"                               #>  [14] \"2951.000000\"                               #>  [15] \"2983.000000\"                               #>  [16] \"3036.000000\"                               #>  [17] \"3102.000000\"                               #>  [18] \"3186.000000\"                               #>  [19] \"3218.000000\"                               #>  [20] \"3267.000000\"                               #>  [21] \"3369.000000\"                               #>  [22] \"3418.000000\"                               #>  [23] \"3449.000000\"                               #>  [24] \"3534.000000\"                               #>  [25] \"3600.000000\"                               #>  [26] \"3653.000000\"                               #>  [27] \"3684.000000\"                               #>  [28] \"3765.000000\"                               #>  [29] \"3804.000000\"                               #>  [30] \"3867.000000\"                               #>  [31] \"3969.000000\"                               #>  [32] \"4032.000000\"                               #>  [33] \"4071.000000\"                               #>  [34] \"4151.000000\"                               #>  [35] \"4183.000000\"                               #>  [36] \"4236.000000\"                               #>  [37] \"4302.000000\"                               #>  [38] \"4386.000000\"                               #>  [39] \"4418.000000\"                               #>  [40] \"4467.000000\"                               #>  [41] \"4569.000000\"                               #>  [42] \"4618.000000\"                               #>  [43] \"4649.000000\"                               #>  [44] \"4734.000000\"                               #>  [45] \"4800.000000\"                               #>  [46] \"4853.000000\"                               #>  [47] \"4884.000000\"                               #>  [48] \"4965.000000\"                               #>  [49] \"5004.000000\"                               #>  [50] \"5067.000000\"                               #>  [51] \"5169.000000\"                               #>  [52] \"5232.000000\"                               #>  [53] \"5271.000000\"                               #>  [54] \"5351.000000\"                               #>  [55] \"5383.000000\"                               #>  [56] \"5436.000000\"                               #>  [57] \"5502.000000\"                               #>  [58] \"5586.000000\"                               #>  [59] \"5618.000000\"                               #>  [60] \"5667.000000\"                               #>  [61] \"5769.000000\"                               #>  [62] \"5818.000000\"                               #>  [63] \"5849.000000\"                               #>  [64] \"5934.000000\"                               #>  [65] \"6000.000000\"                               #>  [66] \"6053.000000\"                               #>  [67] \"6084.000000\"                               #>  [68] \"6165.000000\"                               #>  [69] \"6204.000000\"                               #>  [70] \"6267.000000\"                               #>  [71] \"6369.000000\"                               #>  [72] \"6432.000000\"                               #>  [73] \"6471.000000\"                               #>  [74] \"6551.000000\"                               #>  [75] \"6583.000000\"                               #>  [76] \"6636.000000\"                               #>  [77] \"6702.000000\"                               #>  [78] \"6786.000000\"                               #>  [79] \"6818.000000\"                               #>  [80] \"6867.000000\"                               #>  [81] \"6969.000000\"                               #>  [82] \"7018.000000\"                               #>  [83] \"7049.000000\"                               #>  [84] \"7134.000000\"                               #>  [85] \"7200.000000\"                               #>  [86] \"7253.000000\"                               #>  [87] \"7284.000000\"                               #>  [88] \"7365.000000\"                               #>  [89] \"7404.000000\"                               #>  [90] \"7467.000000\"                               #>  [91] \"7569.000000\"                               #>  [92] \"7632.000000\"                               #>  [93] \"7671.000000\"                               #>  [94] \"7751.000000\"                               #>  [95] \"7783.000000\"                               #>  [96] \"7836.000000\"                               #>  [97] \"7902.000000\"                               #>  [98] \"7986.000000\"                               #>  [99] \"8018.000000\"                               #> [100] \"8067.000000\"                               #> [101] \"8169.000000\"                               #> [102] \"8218.000000\"                               #> [103] \"8249.000000\"                               #> [104] \"8334.000000\"                               #> [105] \"8400.000000\"                               #> [106] \"8453.000000\"                               #> [107] \"8484.000000\"                               #> [108] \"8565.000000\"                               #> [109] \"8604.000000\"                               #> [110] \"8667.000000\"                               #> [111] \"8769.000000\"                               #> [112] \"8832.000000\"                               #> [113] \"8871.000000\"                               #> [114] \"8951.000000\"                               #> [115] \"8983.000000\"                               #> [116] \"9036.000000\"                               #> [117] \"9102.000000\"                               #> [118] \"9186.000000\"                               #> [119] \"9218.000000\"                               #> [120] \"9267.000000\"                               #> [121] \"9369.000000\"                               #> [122] \"9418.000000\"                               #> [123] \"9449.000000\"                               #> [124] \"9534.000000\"                               #> [125] \"9600.000000\"                               #> [126] \"9653.000000\"                               #> [127] \"9684.000000\"                               #> [128] \"9765.000000\"                               #> [129] \"9804.000000\"                               #> [130] \"9867.000000\"                               #> [131] \"9969.000000\"                               #> [132] \"10032.000000\""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"M. Edward (Ed) Borasky. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Borasky M (2023). eikosany: Algorithmic Composition Erv Wilson's Combination Product Sets. https://algocompsynth.github.io/eikosany/, https://github.com/AlgoCompSynth/eikosany.","code":"@Manual{,   title = {eikosany: Algorithmic Composition With Erv Wilson's Combination Product Sets},   author = {M. Edward (Ed) Borasky},   year = {2023},   note = {https://algocompsynth.github.io/eikosany/, https://github.com/AlgoCompSynth/eikosany}, }"},{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"eikosany R package tools algorithmic composition Erv Wilson’s Combination Product Sets (Narushima 2019, chap. 6). ’s meant complement microtonal composition tools, replace . name: Eikosany 20-note scale derived Erv Wilson six harmonic factors. Although six factors can used, commonly encounterered Eikosany uses first six odd numbers: 1, 3, 5, 7, 9 11.","code":""},{"path":"/index.html","id":"other-tools","dir":"","previous_headings":"","what":"Other tools","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"Scala. Note: Scala multi-paradigm programming language runs Java Virtual Machine. specialized tool working musical scales. Sevish’s Scale Workshop. web-based tool working musical scales. Leimma Apotome. tools, Khyam Allami Counterpoint browser-based applications creating microtonal scales making generative music . ODDSound MTS-ESP. plugin digital audio workstations (DAWs) facilitates production microtonal music. copy ’re making microtonal electronic music, . Eikosany scales Erv Wilson developed ship MTS-ESP, don’t really need R package compose . Entonal Studio. Entonal Studio user interface package microtonal composition. can operate standalone application, plugin host plugin. copy Entonal Studio recommend highly. Universal Tuning Editor. Universal Tuning Editor application computing visualizing microtonal scales tunings, includes tools interface hardware software synthesizers. Wilsonic. free app runs iOS devices. don’t iOS devices ’ve never used . also version Wilsonic development use ODDSound MTS-ESP. See https://wilsonic.co/downloads/downloads-mts-esp/ details. See Xenharmonic Wiki List microtonal software plugins ways making microtonal music.","code":""},{"path":"/index.html","id":"some-history","dir":"","previous_headings":"","what":"Some history","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"February 4, 2001, composer Iannis Xenakis passed away. ’ve fan experimental music, especially musique concrète, algorithmically composed music, microtonal music, avant-garde genres since undergraduate. Xenakis one major figures algorithmic composition. Reading first edition Tuning, Timbre, Spectrum, Scale 1 rekindled appreciation microtonal music Harry Partch. , armed copies Sethares (1998), Formalized Music 2, Genesis Music 3, embarked path led Harry Met Iannis 4. Harry Met Iannis premiered microtonal music festival El Paso, Texas late October, 2001. Bandcamp version essentially identical version; source code GitHub https://github.com/AlgoCompSynth/-harry-met-iannis. festival, met number composers working microtonal just intonation, one name kept coming : Erv Wilson. Wilson theoretician developed keyboards, scales tuning systems several composers using time, still using today. Terumi Narushima’s Microtonality Tuning Systems Erv Wilson 5 comprehensive documentation Wilson’s work basis code package.","code":""},{"path":"/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"two main motivations: ’s old saying really want learn something, teach computer . case Erv Wilson’s musical constructs, teasing construction processes others’ writings subject non-trivial task. example, much Wilson’s work consists multi-dimensional graph structures drawn flat paper. build physical three-dimensional models , can’t even rendered three dimension. graph theory operations generated musical ways traverse obvious. 20th anniversary Xenakis’ passing Harry Met Iannis occured second year virtual isolation COVID-19. 2021, acquired two synthesizers capable mapping keyboards arbitrary microtonal scales: Ashun Sound Machines Hydrasynth Desktop, Korg Minilogue XD. Hydrasynth ships tuning tables many Erv Wilson’s scales already firmware. Minilogue XD, user can load six custom scales software librarian program. ’m keyboard player, even , remapping process scales leaves middle C musician normally expect find . notes somewhere else. need translator music want write doesn’t involve lot trial error fumbling around remapped synthesizer -screen keyboard. CPS scales aimed harmonic musical structures like chords, finding remapped keyboard tedious error-prone. Music composed using Wilson’s musical structures mostly played instruments custom-built . keyboards designed Wilson’s microtonal music; indeed, Wilson designed microtonal keyboards (Narushima 2019, chap. 2). ’re quite expensive , like instruments, custom-built. need tools work .","code":""},{"path":"/index.html","id":"milestones","dir":"","previous_headings":"","what":"Milestones","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"ultimate goal package compose music using Combination Product Set (CPS) scales. three milestones path: v0.5.0: synthesizing tones CPS scale WAV files can used sample-based workflow, v0.7.5: creating MIDI files can imported DAW editing music production, v0.9.0: tools creating traversing diagrams CPS scales chords, using DiagrammeR (Iannone 2022).","code":""},{"path":"/index.html","id":"update-2023-02-19","dir":"","previous_headings":"","what":"Update 2023-02-19","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"Mostly hassles getting Minilogue XD retuned 1-3-5-7-9-11 Eikosany, contents v0.5.0 milestone changed rather drastically. now due date - Friday, 2023-02-24, feature freeze place ’m wrapping documentation. pkgdown site active can watch things happen https://algocompsynth.github.io/eikosany/. Much good stuff - diagrams, algorithms exploring Wilson scales generating scores use - v0.7.5 release. don’t firm release date yet ’m aiming end May.","code":""},{"path":[]},{"path":"/reference/base_keyboard_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Base Keyboard Map — base_keyboard_map","title":"Create Base Keyboard Map — base_keyboard_map","text":"Creates base keyboard map","code":""},{"path":"/reference/base_keyboard_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Base Keyboard Map — base_keyboard_map","text":"","code":"base_keyboard_map(middle_c_octave = 4)"},{"path":"/reference/base_keyboard_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Base Keyboard Map — base_keyboard_map","text":"middle_c_octave octave number middle C. default 4, software can use 3 number","code":""},{"path":"/reference/base_keyboard_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Base Keyboard Map — base_keyboard_map","text":"base keyboard map - synth tuned 12 EDO . data.table three columns: note_number: MIDI note number 0 127 note_name: note name (character) octave: octave number. offset defined parameter octave_offset. frequency: frequency Hz. convention, A440 MIDI note number 69, can computed 440.0 * 2 ^ ((note_number - 69) / 12) cents: cents default MIDI note 0. convention, zero note number 0.","code":""},{"path":"/reference/base_keyboard_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Base Keyboard Map — base_keyboard_map","text":"","code":"if (FALSE) {  keyboard_map_c4 <- base_keyboard_map() print(keyboard_map_c4) keyboard_map_c3 <- base_keyboard_map(middle_c_octave = 3) print(keyboard_map_c3) }"},{"path":"/reference/chord_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Chord Table — chord_table","title":"Create Chord Table — chord_table","text":"Creates chord table","code":""},{"path":"/reference/chord_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Chord Table — chord_table","text":"","code":"chord_table(scale_table, choose)"},{"path":"/reference/chord_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Chord Table — chord_table","text":"scale_table scale table use note number name lookup choose number harmonics choose chord","code":""},{"path":"/reference/chord_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Chord Table — chord_table","text":"data.table two columns: chord: chord expressed colon-separated harmonics. subharmonic chord prefixed \"~\". degrees: chord expressed colon-separated scale degrees","code":""},{"path":"/reference/chord_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Chord Table — chord_table","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany eikosany_scale <- scale_table() print(eikosany_scale)  # compute the tetrads of the 1-3-5-7-9-11 Eikosany eikosany_chords <- chord_table(eikosany_scale, 4) print(eikosany_chords) }"},{"path":"/reference/cps_chord_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create CPS Chord Table — cps_chord_table","title":"Create CPS Chord Table — cps_chord_table","text":"Creates chord table combination product set scale based even number harmonic factors.","code":""},{"path":"/reference/cps_chord_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create CPS Chord Table — cps_chord_table","text":"","code":"cps_chord_table(scale_table)"},{"path":"/reference/cps_chord_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create CPS Chord Table — cps_chord_table","text":"scale_table CPS scale table based even number harmonic factors. abort via stop(\"number harmonic factors must even!\") receives one odd number.","code":""},{"path":"/reference/cps_chord_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create CPS Chord Table — cps_chord_table","text":"data.table four columns: chord: chord expressed colon-separated harmonics. subharmonic chord prefixed \"~\". degrees: chord expressed colon-separated scale degrees chord_index: row number chord combination output is_subharm: zero harmonic, one subharmonic. resulting data.table sorted harmonic-subharmonic pairs using data.table::setkey.","code":""},{"path":"/reference/cps_chord_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create CPS Chord Table — cps_chord_table","text":"algorithm used works combination product set built even number harmonic factors, aborts receives one odd number. following, symbol n)m Erv Wilson's notation number combinations m items taken n time. n_harmonics number harmonic factors, resulting chords choose <- n_harmonics / 2 + 1 notes. choose)n_harmonics \"harmonic\" chords choose)n_harmonics \"sub-harmonic\" chords.","code":""},{"path":"/reference/cps_chord_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create CPS Chord Table — cps_chord_table","text":"","code":"# compute the tetrads of the 1-3-5-7-9-11 Eikosany eikosany <- cps_scale_table() print(eikosany_chords <- cps_chord_table(eikosany)) #>            chord     degrees chord_index is_subharm #>  1:      1:3:5:7   1:6:11:15           1          0 #>  2:  /1:/3:/5:/7   0:5:10:16           1          1 #>  3:      1:3:5:9  7:11:14:19           2          0 #>  4:  /1:/3:/5:/9   0:4:12:17           2          1 #>  5:     1:3:5:11   2:8:11:13           3          0 #>  6: /1:/3:/5:/11    0:3:9:18           3          1 #>  7:      1:3:7:9   1:9:14:18           4          0 #>  8:  /1:/3:/7:/9  2:10:13:17           4          1 #>  9:     1:3:7:11    1:4:8:12           5          0 #> 10: /1:/3:/7:/11   3:7:10:19           5          1 #> 11:     1:3:9:11   5:8:14:16           6          0 #> 12: /1:/3:/9:/11   3:6:15:17           6          1 #> 13:      1:5:7:9    3:6:9:19           7          0 #> 14:  /1:/5:/7:/9    2:5:8:12           7          1 #> 15:     1:5:7:11   4:6:13:17           8          0 #> 16: /1:/5:/7:/11   5:7:14:18           8          1 #> 17:     1:5:9:11 10:13:16:19           9          0 #> 18: /1:/5:/9:/11  1:12:15:18           9          1 #> 19:     1:7:9:11    0:4:9:16          10          0 #> 20: /1:/7:/9:/11   2:7:11:15          10          1 #> 21:      3:5:7:9   3:7:15:18          11          0 #> 22:  /3:/5:/7:/9   4:8:13:16          11          1 #> 23:     3:5:7:11  2:12:15:17          12          0 #> 24: /3:/5:/7:/11  9:14:16:19          12          1 #> 25:     3:5:9:11    2:5:7:10          13          0 #> 26: /3:/5:/9:/11     1:4:6:9          13          1 #> 27:     3:7:9:11   0:5:12:18          14          0 #> 28: /3:/7:/9:/11  6:11:13:19          14          1 #> 29:     5:7:9:11   0:3:10:17          15          0 #> 30: /5:/7:/9:/11   1:8:11:14          15          1 #>            chord     degrees chord_index is_subharm  # compute the pentads of the 1-3-5-7-9-11-13-15 Hebdomekontany hebdomekontany <- cps_scale_table(   harmonics = c(1, 3, 5, 7, 9, 11, 13, 15), choose = 4 ) print(hebdomekontany_chords <- cps_chord_table(hebdomekontany)) #>                  chord        degrees chord_index is_subharm #>   1:         1:3:5:7:9 11:24:37:47:65           1          0 #>   2:    /1:/3:/5:/7:/9  0:13:26:42:60           1          1 #>   3:        1:3:5:7:11  5:28:37:45:61           2          0 #>   4:   /1:/3:/5:/7:/11   0:9:32:46:62           2          1 #>   5:        1:3:5:7:13 10:29:37:44:57           3          0 #>  ---                                                         #> 108: /5:/7:/11:/13:/15  1:11:40:47:55          54          1 #> 109:      5:9:11:13:15   0:9:27:41:60          55          0 #> 110: /5:/9:/11:/13:/15 10:28:37:47:66          55          1 #> 111:      7:9:11:13:15   0:7:26:46:63          56          0 #> 112: /7:/9:/11:/13:/15 11:30:37:44:61          56          1"},{"path":"/reference/cps_scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Combination Product Set Scale Table — cps_scale_table","title":"Create Combination Product Set Scale Table — cps_scale_table","text":"Creates scale table combination product set definition","code":""},{"path":"/reference/cps_scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Combination Product Set Scale Table — cps_scale_table","text":"","code":"cps_scale_table(harmonics = c(1, 3, 5, 7, 9, 11), choose = 3)"},{"path":"/reference/cps_scale_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Combination Product Set Scale Table — cps_scale_table","text":"harmonics vector harmonics use - defaults first six odd numbers, harmonics define 1-3-5-7-9-11 Eikosany. choose number harmonics choose combination - defaults 3, number harmonics combination Eikosany.","code":""},{"path":"/reference/cps_scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Combination Product Set Scale Table — cps_scale_table","text":"data.table eight columns: note_name: product harmonics defines note (character) ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character) ratio_cents: ratio cents (hundredths semitone) interval_cents: interval note previous note degree: scale degree zero (number notes) - 1 key_12EDO: note name closest 12EDO note. Note synthesizers allow returning relative C next octave , offset B note. offset_cents: offset cents key_12EDO","code":""},{"path":"/reference/cps_scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Combination Product Set Scale Table — cps_scale_table","text":"","code":"# the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- cps_scale_table()) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:     1x3x5 1.000000          1     0.00000             NA      0         C #>  2:    5x9x11 1.031250      33/32    53.27294       53.27294      1        C# #>  3:     1x7x9 1.050000      21/20    84.46719       31.19425      2        C# #>  4:    1x3x11 1.100000      11/10   165.00423       80.53704      3         D #>  5:     3x5x9 1.125000        9/8   203.91000       38.90577      4         D #>  6:     1x5x7 1.166667        7/6   266.87091       62.96090      5        D# #>  7:    3x9x11 1.237500      99/80   368.91423      102.04332      6         E #>  8:    1x7x11 1.283333      77/60   431.87513       62.96090      7         E #>  9:     5x7x9 1.312500      21/16   470.78091       38.90577      8         F #> 10:    3x5x11 1.375000       11/8   551.31794       80.53704      9        F# #> 11:     1x3x7 1.400000        7/5   582.51219       31.19425     10        F# #> 12:    7x9x11 1.443750    231/160   635.78514       53.27294     11        F# #> 13:     1x5x9 1.500000        3/2   701.95500       66.16987     12         G #> 14:     3x7x9 1.575000      63/40   786.42219       84.46719     13        G# #> 15:    5x7x11 1.604167      77/48   818.18885       31.76665     14        G# #> 16:    1x9x11 1.650000      33/20   866.95923       48.77038     15         A #> 17:     3x5x7 1.750000        7/4   968.82591      101.86668     16        A# #> 18:     1x3x9 1.800000        9/5  1017.59629       48.77038     17        A# #> 19:    1x5x11 1.833333       11/6  1049.36294       31.76665     18        A# #> 20:    3x7x11 1.925000      77/40  1133.83013       84.46719     19         B #> 21:    1x3x5' 2.000000          2  1200.00000       66.16987     20         B #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>     offset_cents #>  1:     0.000000 #>  2:   -46.727057 #>  3:   -15.532807 #>  4:   -34.995772 #>  5:     3.910002 #>  6:   -33.129094 #>  7:   -31.085770 #>  8:    31.875134 #>  9:   -29.219093 #> 10:   -48.682058 #> 11:   -17.487807 #> 12:    35.785136 #> 13:     1.955001 #> 14:   -13.577806 #> 15:    18.188848 #> 16:   -33.040771 #> 17:   -31.174094 #> 18:    17.596288 #> 19:    49.362941 #> 20:    33.830135 #> 21:   100.000000 #>     offset_cents  # the 1-3-5-7 Hexany hexany_harmonics <- c(1, 3, 5, 7) hexany_choose <- 2 print(hexany <- cps_scale_table(hexany_harmonics, hexany_choose)) #>    note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #> 1:       1x3 1.000000          1      0.0000             NA      0         C #> 2:       1x7 1.166667        7/6    266.8709      266.87091      1        D# #> 3:       3x5 1.250000        5/4    386.3137      119.44281      2         E #> 4:       5x7 1.458333      35/24    653.1846      266.87091      3         G #> 5:       1x5 1.666667        5/3    884.3587      231.17409      4         A #> 6:       3x7 1.750000        7/4    968.8259       84.46719      5        A# #> 7:      1x3' 2.000000          2   1200.0000      231.17409      6         B #>    offset_cents #> 1:      0.00000 #> 2:    -33.12909 #> 3:    -13.68629 #> 4:    -46.81538 #> 5:    -15.64129 #> 6:    -31.17409 #> 7:    100.00000  # the 1-7-9-11-13 2)5 Dekany  dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany <- cps_scale_table(dekany_harmonics, dekany_choose)) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:       1x7 1.000000          1     0.00000             NA      0         C #>  2:      9x13 1.044643    117/112    75.61176       75.61176      1        C# #>  3:       7x9 1.125000        9/8   203.91000      128.29824      2         D #>  4:     11x13 1.276786    143/112   423.01970      219.10970      3         E #>  5:       1x9 1.285714        9/7   435.08410       12.06440      4         E #>  6:      7x11 1.375000       11/8   551.31794      116.23385      5        F# #>  7:      1x11 1.571429       11/7   782.49204      231.17409      6        G# #>  8:      7x13 1.625000       13/8   840.52766       58.03563      7        G# #>  9:      9x11 1.767857      99/56   986.40204      145.87438      8        A# #> 10:      1x13 1.857143       13/7  1071.70176       85.29972      9         B #> 11:      1x7' 2.000000          2  1200.00000      128.29824     10         B #>     offset_cents #>  1:     0.000000 #>  2:   -24.388243 #>  3:     3.910002 #>  4:    23.019698 #>  5:    35.084095 #>  6:   -48.682058 #>  7:   -17.507964 #>  8:    40.527662 #>  9:   -13.597962 #> 10:   -28.298245 #> 11:   100.000000  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- cps_scale_table(harmonics_35, choose_35)) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:     1x3x5 1.000000          1     0.00000             NA      0         C #>  2:    5x9x11 1.031250      33/32    53.27294       53.27294      1        C# #>  3:   7x11x13 1.042708   1001/960    72.40280       19.12985      2        C# #>  4:     1x7x9 1.050000      21/20    84.46719       12.06440      3        C# #>  5:    1x5x13 1.083333      13/12   138.57266       54.10547      4        C# #>  6:    1x3x11 1.100000      11/10   165.00423       26.43157      5         D #>  7:     3x5x9 1.125000        9/8   203.91000       38.90577      6         D #>  8:    3x7x13 1.137500      91/80   223.03985       19.12985      7         D #>  9:     1x5x7 1.166667        7/6   266.87091       43.83105      8        D# #> 10:   1x11x13 1.191667    143/120   303.57689       36.70598      9        D# #> 11:    5x9x13 1.218750      39/32   342.48266       38.90577     10        D# #> 12:    3x9x11 1.237500      99/80   368.91423       26.43157     11         E #> 13:    1x7x11 1.283333      77/60   431.87513       62.96090     12         E #> 14:    1x3x13 1.300000      13/10   454.21395       22.33881     13         F #> 15:     5x7x9 1.312500      21/16   470.78091       16.56696     14         F #> 16:   9x11x13 1.340625    429/320   507.48689       36.70598     15         F #> 17:    3x5x11 1.375000       11/8   551.31794       43.83105     16        F# #> 18:     1x3x7 1.400000        7/5   582.51219       31.19425     17        F# #> 19:    7x9x11 1.443750    231/160   635.78514       53.27294     18        F# #> 20:    3x9x13 1.462500     117/80   658.12395       22.33881     19         G #> 21:   5x11x13 1.489583     143/96   689.89060       31.76665     20         G #> 22:     1x5x9 1.500000        3/2   701.95500       12.06440     21         G #> 23:    1x7x13 1.516667      91/60   721.08485       19.12985     22         G #> 24:     3x7x9 1.575000      63/40   786.42219       65.33734     23        G# #> 25:    5x7x11 1.604167      77/48   818.18885       31.76665     24        G# #> 26:    3x5x13 1.625000       13/8   840.52766       22.33881     25        G# #> 27:    1x9x11 1.650000      33/20   866.95923       26.43157     26         A #> 28:    7x9x13 1.706250    273/160   924.99486       58.03563     27         A #> 29:     3x5x7 1.750000        7/4   968.82591       43.83105     28        A# #> 30:   3x11x13 1.787500     143/80  1005.53189       36.70598     29        A# #> 31:     1x3x9 1.800000        9/5  1017.59629       12.06440     30        A# #> 32:    1x5x11 1.833333       11/6  1049.36294       31.76665     31        A# #> 33:    5x7x13 1.895833      91/48  1107.39857       58.03563     32         B #> 34:    3x7x11 1.925000      77/40  1133.83013       26.43157     33         B #> 35:    1x9x13 1.950000      39/20  1156.16895       22.33881     34         B #> 36:    1x3x5' 2.000000          2  1200.00000       43.83105     35         B #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>     offset_cents #>  1:     0.000000 #>  2:   -46.727057 #>  3:   -27.597204 #>  4:   -15.532807 #>  5:    38.572661 #>  6:   -34.995772 #>  7:     3.910002 #>  8:    23.039854 #>  9:   -33.129094 #> 10:     3.576889 #> 11:    42.482663 #> 12:   -31.085770 #> 13:    31.875134 #> 14:   -45.786052 #> 15:   -29.219093 #> 16:     7.486891 #> 17:   -48.682058 #> 18:   -17.487807 #> 19:    35.785136 #> 20:   -41.876050 #> 21:   -10.109397 #> 22:     1.955001 #> 23:    21.084854 #> 24:   -13.577806 #> 25:    18.188848 #> 26:    40.527662 #> 27:   -33.040771 #> 28:    24.994855 #> 29:   -31.174094 #> 30:     5.531890 #> 31:    17.596288 #> 32:    49.362941 #> 33:     7.398567 #> 34:    33.830135 #> 35:    56.168949 #> 36:   100.000000 #>     offset_cents"},{"path":"/reference/create_12edo_scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 12EDO Scale Table — create_12edo_scale_table","title":"Create 12EDO Scale Table — create_12edo_scale_table","text":"Creates scale table 12EDO","code":""},{"path":"/reference/create_12edo_scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 12EDO Scale Table — create_12edo_scale_table","text":"","code":"create_12edo_scale_table()"},{"path":"/reference/create_12edo_scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 12EDO Scale Table — create_12edo_scale_table","text":"data.table ten columns: note_name: note name (character) ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character). ratios 12EDO irrational, approximation. ratio_cents: ratio cents (hundredths semitone) degree: scale degree zero (number notes) - 1 key_12EDO: note name nearest 12EDO note offset_cents: offset cents key_12EDO","code":""},{"path":"/reference/create_12edo_scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 12EDO Scale Table — create_12edo_scale_table","text":"","code":"if (FALSE) {  print(vanilla <- create_12edo_scale_table())  }"},{"path":"/reference/create_chord_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Chord Plot — create_chord_plot","title":"Create Chord Plot — create_chord_plot","text":"Creates ggplot2 object plot chord","code":""},{"path":"/reference/create_chord_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Chord Plot — create_chord_plot","text":"","code":"create_chord_plot(chord, title_string, keyboard_map, base_note_number = 48)"},{"path":"/reference/create_chord_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Chord Plot — create_chord_plot","text":"chord numeric vector scale degrees chord title_string string use plot title. usually chord name chord table keyboard_map keyboard map scale base_note_number routine assumes 37-key synth keyboard, leftmost key emitting MIDI note number C. Thus, base_note_number must equal zero modulo 12. default 48, C middle C. Minilogue XD set factory reset.","code":""},{"path":"/reference/create_chord_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Chord Plot — create_chord_plot","text":"ggplot2 object can printed","code":""},{"path":"/reference/create_chord_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Chord Plot — create_chord_plot","text":"","code":"if (FALSE) {   eikosany <- create_scale_table()   eikosany_map <- create_keyboard_map(eikosany)   print(create_chord_plot(     c(1, 6, 11, 15),      \"1:3:5:7\",      eikosany_map,      48   )) }"},{"path":"/reference/create_chord_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Chord Table — create_chord_table","title":"Create Chord Table — create_chord_table","text":"Creates chord table combination product set scale based even number harmonic factors.","code":""},{"path":"/reference/create_chord_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Chord Table — create_chord_table","text":"","code":"create_chord_table(scale_table)"},{"path":"/reference/create_chord_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Chord Table — create_chord_table","text":"scale_table scale table based even number harmonic factors. abort via stop(\"number harmonic factors must even!\") receives one odd number.","code":""},{"path":"/reference/create_chord_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Chord Table — create_chord_table","text":"data.table four columns: chord: chord expressed colon-separated harmonics. subharmonic chord prefixed \"~\". degrees: chord expressed colon-separated scale degrees chord_index: row number chord combination output is_subharm: zero harmonic, one subharmonic. resulting data.table sorted harmonic-subharmonic pairs using data.table::setkey.","code":""},{"path":"/reference/create_chord_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Chord Table — create_chord_table","text":"algorithm used works combination product set built even number harmonic factors, aborts receives one odd number. following, symbol n)m Erv Wilson's notation number combinations m items taken n time. n_harmonics number harmonic factors, resulting chords choose <- n_harmonics / 2 + 1 notes. choose)n_harmonics \"harmonic\" chords choose)n_harmonics \"sub-harmonic\" chords. T","code":""},{"path":"/reference/create_chord_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Chord Table — create_chord_table","text":"","code":"if (FALSE) {  # compute the tetrads of the 1-3-5-7-9-11 Eikosany eikosany <- create_scale_table() print(eikosany_chords <- create_chord_table(eikosany))  # compute the pentads of the 1-3-5-7-9-11-13-15 Hebdomekontany hebdomekontany <- create_scale_table(   harmonics = c(1, 3, 5, 7, 9, 11, 13, 15), choose = 4 ) print(hebdomekontany_chords <- create_chord_table(hebdomekontany)) }"},{"path":"/reference/create_cps_scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Combination Product Set Scale Table — create_cps_scale_table","title":"Create Combination Product Set Scale Table — create_cps_scale_table","text":"Creates scale table combination product set definition","code":""},{"path":"/reference/create_cps_scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Combination Product Set Scale Table — create_cps_scale_table","text":"","code":"create_cps_scale_table(harmonics = c(1, 3, 5, 7, 9, 11), choose = 3)"},{"path":"/reference/create_cps_scale_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Combination Product Set Scale Table — create_cps_scale_table","text":"harmonics vector harmonics use - defaults first six odd numbers, harmonics define 1-3-5-7-9-11 Eikosany. choose number harmonics choose combination - defaults 3, number harmonics combination Eikosany.","code":""},{"path":"/reference/create_cps_scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Combination Product Set Scale Table — create_cps_scale_table","text":"data.table eight columns: note_name: product harmonics defines note (character) ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character) ratio_cents: ratio cents (hundredths semitone) interval_cents: interval note previous note degree: scale degree zero (number notes) - 1 key_12EDO: note name closest 12EDO note offset_cents: offset cents key_12EDO","code":""},{"path":"/reference/create_cps_scale_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Combination Product Set Scale Table — create_cps_scale_table","text":"Dirtywave M8 (https://cdn.shopify.com/s/files/1/0455/0485/6229/files/m8_operation_manual_v20220621.pdf?v=1655861519, page 24) can use arbitrary scales defined offsets cents 12EDO note. scales 12 fewer notes per octave, can just define scale using key_12EDO offset_cents table. scales 12 notes per octave, need allocate multiple scales M8. may synthesizers can tuned way, M8 one .","code":""},{"path":"/reference/create_cps_scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Combination Product Set Scale Table — create_cps_scale_table","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- create_cps_scale_table())  # the 1-3-5-7 Hexany hexany_harmonics <- c(1, 3, 5, 7) hexany_choose = 2 print(hexany <- create_cps_scale_table(hexany_harmonics, hexany_choose))  # the 1-7-9-11-13 2)5 Dekany  dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany <- create_cps_scale_table(dekany_harmonics, dekany_choose))  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- create_cps_scale_table(harmonics_35, choose_35))  }"},{"path":"/reference/create_edo_scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Equal-Tempered Scale Table — create_edo_scale_table","title":"Create Equal-Tempered Scale Table — create_edo_scale_table","text":"Creates scale table equal divisions octave (EDO)","code":""},{"path":"/reference/create_edo_scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Equal-Tempered Scale Table — create_edo_scale_table","text":"","code":"create_edo_scale_table(   note_names = c(\"C \", \"C#\", \"D \", \"D#\", \"E \", \"F \", \"F#\", \"G \", \"G#\", \"A \", \"A#\", \"B \") )"},{"path":"/reference/create_edo_scale_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Equal-Tempered Scale Table — create_edo_scale_table","text":"note_names character vector names notes scale. need give - can figure everything else!","code":""},{"path":"/reference/create_edo_scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Equal-Tempered Scale Table — create_edo_scale_table","text":"data.table eight columns: note_name: note name (character) ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character). ratios EDOs irrational, approximation. ratio_cents: ratio cents (hundredths semitone) interval_cents: interval note previous note degree: scale degree zero (number notes) - 1 key_12EDO: note name nearest 12EDO note offset_cents: offset cents key_12EDO","code":""},{"path":"/reference/create_edo_scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Equal-Tempered Scale Table — create_edo_scale_table","text":"","code":"if (FALSE) {  print(vanilla <- create_edo_scale_table()) # default is 12EDO, of course  nn19 <- c(   \"C \",   \"C+\",   \"D-\",   \"D \",   \"D+\",   \"E-\",   \"E \",   \"E+\",   \"F \",   \"F+\",   \"G-\",   \"G \",   \"G+\",   \"A-\",   \"A \",   \"A+\",   \"B-\",   \"B \",   \"B+\") print(length(nn19)) print(nn19) print(edo19 <- create_edo_scale_table(nn19))  nn31 <- c(   \"C  \",   \"C+ \",   \"C++\",   \"D--\",   \"D- \",   \"D  \",   \"D+ \",   \"D++\",   \"E--\",   \"E- \",   \"E  \",   \"F--\",   \"E++\",   \"F  \",   \"F+ \",   \"F++\",   \"G--\",   \"G- \",   \"G  \",   \"G+ \",   \"G++\",   \"A--\",   \"A- \",   \"A  \",   \"A+ \",   \"A++\",   \"B--\",   \"B- \",   \"B  \",   \"C--\",   \"B++\") print(length(nn31)) print(nn31) print(edo31 <- create_edo_scale_table(nn31))  nn22 <- c(   \"C  \",   \"C+ \",   \"C++\",   \"D- \",   \"D  \",   \"D+ \",   \"D++\",   \"E- \",   \"E  \",   \"F  \",   \"F+ \",   \"F++\",   \"G- \",   \"G  \",   \"G+ \",   \"G++\",   \"A- \",   \"A  \",   \"A+ \",   \"A++\",   \"B- \",   \"B  \") print(length(nn22)) print(nn22) print(edo22 <- create_edo_scale_table(nn22))  }"},{"path":"/reference/create_interval_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interval List — create_interval_list","title":"Create Interval List — create_interval_list","text":"Creates interval list scale table","code":""},{"path":"/reference/create_interval_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interval List — create_interval_list","text":"","code":"create_interval_list(scale_table)"},{"path":"/reference/create_interval_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interval List — create_interval_list","text":"scale_table scale table create_scale_table","code":""},{"path":"/reference/create_interval_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interval List — create_interval_list","text":"interval list. data.table seven columns name \"\" note from_degree scale degree \"\" note name \"\" note to_degree scale degree \"\" note ratio interval number ratio_frac interval vulgar fraction (character) ratio_cents interval cents","code":""},{"path":"/reference/create_interval_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interval List — create_interval_list","text":"","code":"if (FALSE) {  # default is the 1-3-5-7-9-11 Eikosany eikosany <- create_scale_table() print(eikosany_interval_list <-create_interval_list(eikosany))  }"},{"path":"/reference/create_interval_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interval Matrix — create_interval_matrix","title":"Create Interval Matrix — create_interval_matrix","text":"Creates interval matrix scale table","code":""},{"path":"/reference/create_interval_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interval Matrix — create_interval_matrix","text":"","code":"create_interval_matrix(scale_table)"},{"path":"/reference/create_interval_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interval Matrix — create_interval_matrix","text":"scale_table scale table create_scale_table function","code":""},{"path":"/reference/create_interval_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interval Matrix — create_interval_matrix","text":"interval matrix","code":""},{"path":"/reference/create_interval_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interval Matrix — create_interval_matrix","text":"","code":"if (FALSE) {  # the 1-3-5-7 Hexany hexany_harmonics <- c(1, 3, 5, 7) hexany_choose = 2 hexany <- create_scale_table(hexany_harmonics, hexany_choose) print(hexany_interval_matrix <-create_interval_matrix(hexany)) }"},{"path":"/reference/create_interval_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interval Table — create_interval_table","title":"Create Interval Table — create_interval_table","text":"Creates interval table scale table","code":""},{"path":"/reference/create_interval_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interval Table — create_interval_table","text":"","code":"create_interval_table(scale_table)"},{"path":"/reference/create_interval_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interval Table — create_interval_table","text":"scale_table scale table create_scale_table","code":""},{"path":"/reference/create_interval_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interval Table — create_interval_table","text":"interval table. data.table seven columns name \"\" note from_degree scale degree \"\" note name \"\" note to_degree scale degree \"\" note ratio interval number ratio_frac interval vulgar fraction (character) ratio_cents interval cents","code":""},{"path":"/reference/create_interval_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interval Table — create_interval_table","text":"","code":"if (FALSE) {  # default is the 1-3-5-7-9-11 Eikosany eikosany <- create_scale_table() print(eikosany_interval_table <-create_interval_table(eikosany))  }"},{"path":"/reference/create_keyboard_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Keyboard Map — create_keyboard_map","title":"Create Keyboard Map — create_keyboard_map","text":"Creates keyboard map","code":""},{"path":"/reference/create_keyboard_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Keyboard Map — create_keyboard_map","text":"","code":"create_keyboard_map(scale_table, middle_c_octave = 4)"},{"path":"/reference/create_keyboard_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Keyboard Map — create_keyboard_map","text":"scale_table output create_scale_table middle_c_octave octave number middle C. varying conventions octave number middle C. default function 4, software can use 3 even number","code":""},{"path":"/reference/create_keyboard_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Keyboard Map — create_keyboard_map","text":"keyboard map. data.table eight columns: note_number: MIDI note number .NN_MIN .NN_MAX key_name: note name key 12EDO. key normally press play note number key_octave: octave key normally plays note_name: note name scale table ratio_frac: ratio note vulgar fraction degree: scale degree note octave: octave number note freq: frequency Hz cents: cents default MIDI note .NN_MIN, frequency .FREQ_MIN. ref_keyname: synthesizers, including Korg Minilogue XD, let retune key offset cents another reference key. column name reference key. ref_octave: octave number reference key ref_offset: offset cents reference key","code":""},{"path":"/reference/create_keyboard_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Keyboard Map — create_keyboard_map","text":"function currently hard-coded compute map middle C frequency .FREQ_MIDDLE_Cis mapped MIDI note number .NN_MIDDLE_C scale degree 0. current constants 12EDO A440 note 69. note 6000 cents MIDI note number 0.","code":""},{"path":"/reference/create_keyboard_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Keyboard Map — create_keyboard_map","text":"","code":"if (FALSE) {  hexany_harmonics <- c(1, 3, 5, 7) hexany_choose = 2 hexany <- create_scale_table(hexany_harmonics, hexany_choose) print(hexany_keyboard_map <- create_keyboard_map(hexany)) dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 dekany <- create_scale_table(dekany_harmonics, dekany_choose) print(dekany_keyboard_map <- create_keyboard_map(dekany)) print(   vanilla_keyboard_map <- create_keyboard_map(create_12edo_scale_table()) ) print(   eikosany_keyboard_map_c3 <-     create_keyboard_map(create_scale_table(), middle_c_octave = 3) ) }"},{"path":"/reference/create_minilogue_xd_scale_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"Writes Scala .scl file Korg Minilogue XD","code":""},{"path":"/reference/create_minilogue_xd_scale_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"","code":"create_minilogue_xd_scale_file(   keyboard_map,   output_file_path,   scale_description = \"'https://algocompsynth.github.io/eikosany/' made this!\" )"},{"path":"/reference/create_minilogue_xd_scale_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"keyboard_map keyboard map created create_keyboard_map output_file_path path file write permission scale_description tell user scale ","code":""},{"path":"/reference/create_minilogue_xd_scale_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"character vector containing data written file. element vector line ASCII text.","code":""},{"path":"/reference/create_minilogue_xd_scale_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"Korg Minilogue XD can microtuned two ways: 1. user octave: octaves synthesizer microtuned using offsets cents 12EDO notes. scales 12 fewer notes, hexany dekany, work, can use key names offsets scale table made create_scale_table. 2. user scale: microtunes whole MIDI keyboard MIDI note numbers zero 127. need use method eikosany. standard process microtune user scale use Korg minilogue xd Sound Librarian. load Scala .scl .kbm file scale want librarian upload synthesizer. theory, Scala files microtonal scale creation tools work. However, 1-3-5-7-9-11 eikosany, mapped middle C keyboard plays 261.625565 Hz, keys mapped match eikosany scale, synthesizer tuned middle C keyboard actually played C two octaves middle C! downloading microtuning synthesizer librarian examining .scl .kbm files, looked like librarian correctly processing input .kbm file. .scl file retrieved synthesizer defined entire mapping synthesizer playing. Technically, .scl file satisfied requirements defined https://www.huygens-fokker.org/scala/scl_format.html. .scl file downloaded synthesizer defined \"octave\" 128 notes, notes specified cents default MIDI note zero. low C - 8.175799 Hz. prepared .scl file cents note zero uploaded synthesizer without .kbm file. correctly microtuned middle C notes nearby checked. check whole keyboard, near can tell correct except note zero. .scl file specify value note retains default pitch 8.175799 Hz. function , , creates .scl file keyboard map table. FAQ: Yes, ugly hack. , accept issues . Yes, tried tools microtune synthesizer via MIDI sysex work. mood troubleshoot Korg Windows MIDI driver issues spending close week troubleshooting sound librarian. Yes, sent email Korg support sound librarian issue. received response acknowledgement email. point run easier tasks try troubleshoot MIDI sysex method. perhaps Korg respond updated sound librarian. Meanwhile, got function making music . Cheers!","code":""},{"path":"/reference/create_minilogue_xd_scale_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Minilogue XD Scale File — create_minilogue_xd_scale_file","text":"","code":"if (FALSE) {  eikosany_map <- create_keyboard_map(create_scale_table()) create_minilogue_xd_scale_file(   eikosany_map, \"~/test.scl\", \"Eikosany 1-3-5-7-9-11\") }"},{"path":"/reference/create_scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Scale Table — create_scale_table","title":"Create Scale Table — create_scale_table","text":"Creates scale table combination product set definition","code":""},{"path":"/reference/create_scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Scale Table — create_scale_table","text":"","code":"create_scale_table(harmonics = c(1, 3, 5, 7, 9, 11), choose = 3)"},{"path":"/reference/create_scale_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Scale Table — create_scale_table","text":"harmonics vector harmonics use - defaults first six odd numbers, harmonics define 1-3-5-7-9-11 Eikosany. choose number harmonics choose combination - defaults 3, number harmonics combination Eikosany.","code":""},{"path":"/reference/create_scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Scale Table — create_scale_table","text":"data.table ten columns: note_name: product harmonics defines note (character) ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character) ratio_cents: ratio cents (hundredths semitone) degree: scale degree zero (number notes) - 1 key_12EDO: note name closest 12EDO note offset_cents: offset cents key_12EDO","code":""},{"path":"/reference/create_scale_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Scale Table — create_scale_table","text":"Dirtywave M8 (https://cdn.shopify.com/s/files/1/0455/0485/6229/files/m8_operation_manual_v20220621.pdf?v=1655861519, page 24) can use arbitrary scales defined offsets cents 12EDO note. scales 12 fewer notes per octave, can just define scale using key_12EDO offset_cents table. scales 12 notes per octave, need allocate multiple scales M8. may synthesizers can tuned way, M8 one .","code":""},{"path":"/reference/create_scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Scale Table — create_scale_table","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- create_scale_table())  # the 1-3-5-7 Hexany hexany_harmonics <- c(1, 3, 5, 7) hexany_choose = 2 print(hexany <- create_scale_table(hexany_harmonics, hexany_choose))  # the 1-7-9-11-13 2)5 Dekany  dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany <- create_scale_table(dekany_harmonics, dekany_choose))  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- create_scale_table(harmonics_35, choose_35))  }"},{"path":"/reference/et_scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Equal-Tempered Scale Table — et_scale_table","title":"Create Equal-Tempered Scale Table — et_scale_table","text":"Creates scale table equal divisions specified period.","code":""},{"path":"/reference/et_scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Equal-Tempered Scale Table — et_scale_table","text":"","code":"et_scale_table(   note_names = c(\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"),   period = 2 )"},{"path":"/reference/et_scale_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Equal-Tempered Scale Table — et_scale_table","text":"note_names character vector names notes scale. default names standard 12 equal divisions octave. period period - default 2, octave","code":""},{"path":"/reference/et_scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Equal-Tempered Scale Table — et_scale_table","text":"data.table eight columns: note_name: note name (character) ratio: ratio defines note, number 1 period ratio_frac: ratio vulgar fraction (character). ratios EDOs irrational, approximation. ratio_cents: ratio cents (hundredths semitone) interval_cents: interval note previous note degree: scale degree zero (number notes) - 1 key_12EDO: note name closest 12EDO note. Note synthesizers allow returning relative C next octave , offset B note. offset_cents: offset cents key_12EDO Note: offsets meaningless period greater 2, case computed!","code":""},{"path":"/reference/et_scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Equal-Tempered Scale Table — et_scale_table","text":"","code":"print(vanilla <- et_scale_table()) # default is 12EDO, of course #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:         C 1.000000          1           0             NA      0         C #>  2:        C# 1.059463  1461/1379         100            100      1        C# #>  3:         D 1.122462  1714/1527         200            100      2         D #>  4:        D# 1.189207  1785/1501         300            100      3        D# #>  5:         E 1.259921    635/504         400            100      4         E #>  6:         F 1.334840  3249/2434         500            100      5         F #>  7:        F# 1.414214   1393/985         600            100      6        F# #>  8:         G 1.498307  2213/1477         700            100      7         G #>  9:        G# 1.587401   1008/635         800            100      8        G# #> 10:         A 1.681793  3002/1785         900            100      9         A #> 11:        A# 1.781797   1527/857        1000            100     10        A# #> 12:         B 1.887749  2943/1559        1100            100     11         B #> 13:        C' 2.000000          2        1200            100     12         B #>     offset_cents #>  1:            0 #>  2:            0 #>  3:            0 #>  4:            0 #>  5:            0 #>  6:            0 #>  7:            0 #>  8:            0 #>  9:            0 #> 10:            0 #> 11:            0 #> 12:            0 #> 13:          100  # 19-EDO # About the note names: even in 2023, code often breaks when given # characters outside the 7-bit international standard. So we don't even # have flats, let alone half-flats, half-sharps, naturals, or any of the # other symbols alternate tuning theorists have proposed.  # So outside of 12EDO, where sharps do double-duty, and product set # scales, where we can use the product label as a note name, we use a # \"/b\" for a half-flat, \"b\" for a flat, \"/#\" for a half-sharp, and \"#\" # for a sharp. Thanks in advance for your understanding.  nn19 <- c(   \"C\",   \"C#\",   \"Db\",   \"D\",   \"D#\",   \"Eb\",   \"E\",   \"E#\",   \"F\",   \"F#\",   \"Gb\",   \"G\",   \"G#\",   \"Ab\",   \"A\",   \"A#\",   \"Bb\",   \"B\",   \"B#\")  print(edo19 <- et_scale_table(nn19)) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:         C 1.000000          1     0.00000             NA      0         C #>  2:        C# 1.037155    977/942    63.15789       63.15789      1        C# #>  3:        Db 1.075691    739/687   126.31579       63.15789      2        C# #>  4:         D 1.115658    627/562   189.47368       63.15789      3         D #>  5:        D# 1.157110   1009/872   252.63158       63.15789      4        D# #>  6:        Eb 1.200103  2333/1944   315.78947       63.15789      5        D# #>  7:         E 1.244693   1114/895   378.94737       63.15789      6         E #>  8:        E# 1.290939  1553/1203   442.10526       63.15789      7         E #>  9:         F 1.338904  1442/1077   505.26316       63.15789      8         F #> 10:        F# 1.388651   1297/934   568.42105       63.15789      9        F# #> 11:        Gb 1.440247  1639/1138   631.57895       63.15789     10        F# #> 12:         G 1.493759   1077/721   694.73684       63.15789     11         G #> 13:        G# 1.549260  2406/1553   757.89474       63.15789     12        G# #> 14:        Ab 1.606822    895/557   821.05263       63.15789     13        G# #> 15:         A 1.666524  3893/2336   884.21053       63.15789     14         A #> 16:        A# 1.728444  1744/1009   947.36842       63.15789     15         A #> 17:        Bb 1.792664   1124/627  1010.52632       63.15789     16        A# #> 18:         B 1.859271   1123/604  1073.68421       63.15789     17         B #> 19:        B# 1.928352   1884/977  1136.84211       63.15789     18         B #> 20:        C' 2.000000          2  1200.00000       63.15789     19         B #>     offset_cents #>  1:     0.000000 #>  2:   -36.842105 #>  3:    26.315789 #>  4:   -10.526316 #>  5:   -47.368421 #>  6:    15.789474 #>  7:   -21.052632 #>  8:    42.105263 #>  9:     5.263158 #> 10:   -31.578947 #> 11:    31.578947 #> 12:    -5.263158 #> 13:   -42.105263 #> 14:    21.052632 #> 15:   -15.789474 #> 16:    47.368421 #> 17:    10.526316 #> 18:   -26.315789 #> 19:    36.842105 #> 20:   100.000000  # 31-EDO nn31 <- c(   \"C\",   \"C/#\",   \"C#\",   \"Db\",   \"D/b\",   \"D\",   \"D/#\",   \"D#\",   \"Eb\",   \"E/b\",   \"E\",   \"Fb\",   \"E#\",   \"F\",   \"F/#\",   \"F#\",   \"Gb\",   \"G/b\",   \"G\",   \"G/#\",   \"G#\",   \"Ab\",   \"A/b\",   \"A\",   \"A/#\",   \"A#\",   \"Bb\",   \"B/b\",   \"B\",   \"Cb\",   \"B#\") print(edo31 <- et_scale_table(nn31)) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:         C 1.000000          1     0.00000             NA      0         C #>  2:       C/# 1.022611  1402/1371    38.70968       38.70968      1         C #>  3:        C# 1.045734  1189/1137    77.41935       38.70968      2        C# #>  4:        Db 1.069380  1156/1081   116.12903       38.70968      3        C# #>  5:       D/b 1.093560    900/823   154.83871       38.70968      4         D #>  6:         D 1.118287  1645/1471   193.54839       38.70968      5         D #>  7:       D/# 1.143573    685/599   232.25806       38.70968      6         D #>  8:        D# 1.169431    987/844   270.96774       38.70968      7        D# #>  9:        Eb 1.195873  3999/3344   309.67742       38.70968      8        D# #> 10:       E/b 1.222914    982/803   348.38710       38.70968      9        D# #> 11:         E 1.250566  2211/1768   387.09677       38.70968     10         E #> 12:        Fb 1.278843  3403/2661   425.80645       38.70968     11         E #> 13:        E# 1.307759  1500/1147   464.51613       38.70968     12         F #> 14:         F 1.337329    781/584   503.22581       38.70968     13         F #> 15:       F/# 1.367568    253/185   541.93548       38.70968     14         F #> 16:        F# 1.398491  1853/1325   580.64516       38.70968     15        F# #> 17:        Gb 1.430113  2783/1946   619.35484       38.70968     16        F# #> 18:       G/b 1.462450    370/253   658.06452       38.70968     17         G #> 19:         G 1.495518   1168/781   696.77419       38.70968     18         G #> 20:       G/# 1.529334   1147/750   735.48387       38.70968     19         G #> 21:        G# 1.563914  2557/1635   774.19355       38.70968     20        G# #> 22:        Ab 1.599276  3536/2211   812.90323       38.70968     21        G# #> 23:       A/b 1.635438    803/491   851.61290       38.70968     22         A #> 24:         A 1.672418  6785/4057   890.32258       38.70968     23         A #> 25:       A/# 1.710234   1387/811   929.03226       38.70968     24         A #> 26:        A# 1.748905   1198/685   967.74194       38.70968     25        A# #> 27:        Bb 1.788450  2942/1645  1006.45161       38.70968     26        A# #> 28:       B/b 1.828889    823/450  1045.16129       38.70968     27        A# #> 29:         B 1.870243   1081/578  1083.87097       38.70968     28         B #> 30:        Cb 1.912532   1465/766  1122.58065       38.70968     29         B #> 31:        B# 1.955777   1371/701  1161.29032       38.70968     30         B #> 32:        C' 2.000000          2  1200.00000       38.70968     31         B #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>     offset_cents #>  1:     0.000000 #>  2:    38.709677 #>  3:   -22.580645 #>  4:    16.129032 #>  5:   -45.161290 #>  6:    -6.451613 #>  7:    32.258065 #>  8:   -29.032258 #>  9:     9.677419 #> 10:    48.387097 #> 11:   -12.903226 #> 12:    25.806452 #> 13:   -35.483871 #> 14:     3.225806 #> 15:    41.935484 #> 16:   -19.354839 #> 17:    19.354839 #> 18:   -41.935484 #> 19:    -3.225806 #> 20:    35.483871 #> 21:   -25.806452 #> 22:    12.903226 #> 23:   -48.387097 #> 24:    -9.677419 #> 25:    29.032258 #> 26:   -32.258065 #> 27:     6.451613 #> 28:    45.161290 #> 29:   -16.129032 #> 30:    22.580645 #> 31:    61.290323 #> 32:   100.000000 #>     offset_cents"},{"path":"/reference/interval_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interval Matrix — interval_matrix","title":"Create Interval Matrix — interval_matrix","text":"Creates interval matrix scale table","code":""},{"path":"/reference/interval_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interval Matrix — interval_matrix","text":"","code":"interval_matrix(scale_table)"},{"path":"/reference/interval_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interval Matrix — interval_matrix","text":"scale_table scale table scale_table function","code":""},{"path":"/reference/interval_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interval Matrix — interval_matrix","text":"interval matrix","code":""},{"path":"/reference/interval_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interval Matrix — interval_matrix","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany_interval_matrix <-interval_matrix(scale_table())) }"},{"path":"/reference/interval_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interval Table — interval_table","title":"Create Interval Table — interval_table","text":"Creates interval table scale table","code":""},{"path":"/reference/interval_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interval Table — interval_table","text":"","code":"interval_table(scale_table)"},{"path":"/reference/interval_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interval Table — interval_table","text":"scale_table scale table ps_scale_table, cps_scale_table, et_scale_table","code":""},{"path":"/reference/interval_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interval Table — interval_table","text":"interval table. data.table seven columns name \"\" note from_degree scale degree \"\" note name \"\" note to_degree scale degree \"\" note ratio interval number ratio_frac interval vulgar fraction (character) ratio_cents interval cents","code":""},{"path":"/reference/interval_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interval Table — interval_table","text":"","code":"# default is the 1-3-5-7-9-11 Eikosany eikosany <- cps_scale_table() print(eikosany_interval_table <-interval_table(eikosany)) #>      from_name from_degree to_name to_degree    ratio ratio_frac ratio_cents #>   1:    3x5x11           9   1x3x7        10 1.018182      56/55    31.19425 #>   2:    5x9x11           1   1x7x9         2 1.018182      56/55    31.19425 #>   3:     1x3x9          17  1x5x11        18 1.018519      55/54    31.76665 #>   4:     3x7x9          13  5x7x11        14 1.018519      55/54    31.76665 #>   5:    1x3x11           3   3x5x9         4 1.022727      45/44    38.90577 #>  ---                                                                         #> 206:    5x9x11           1  3x7x11        19 1.866667      28/15  1080.55719 #> 207:     1x7x9           2  1x3x5'        20 1.904762      40/21  1115.53281 #> 208:     1x3x5           0  3x7x11        19 1.925000      77/40  1133.83013 #> 209:    5x9x11           1  1x3x5'        20 1.939394      64/33  1146.72706 #> 210:     1x3x5           0  1x3x5'        20 2.000000          2  1200.00000"},{"path":"/reference/keyboard_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Keyboard Map — keyboard_map","title":"Create Keyboard Map — keyboard_map","text":"Creates keyboard map","code":""},{"path":"/reference/keyboard_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Keyboard Map — keyboard_map","text":"","code":"keyboard_map(scale_table, middle_c_octave = 4)"},{"path":"/reference/keyboard_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Keyboard Map — keyboard_map","text":"scale_table scale table ps_scale_table, cps_scale_table, et_scale_table middle_c_octave octave number middle C. varying conventions octave number middle C. default function 4, software can use 3 even number","code":""},{"path":"/reference/keyboard_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Keyboard Map — keyboard_map","text":"keyboard map. data.table eight columns: note_number: MIDI note number .NN_MIN .NN_MAX key_name: note name key 12EDO. key normally press play note number key_octave: octave key normally plays note_name: note name scale table ratio_frac: ratio note vulgar fraction degree: scale degree note octave: octave number note freq: frequency Hz cents: cents default MIDI note .NN_MIN, frequency .FREQ_MIN. ref_keyname: synthesizers, including Korg Minilogue XD, let retune key offset cents another reference key. column name reference key. ref_octave: octave number reference key ref_offset: offset cents reference key","code":""},{"path":"/reference/keyboard_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Keyboard Map — keyboard_map","text":"function currently hard-coded compute map middle C frequency .FREQ_MIDDLE_Cis mapped MIDI note number .NN_MIDDLE_C scale degree 0. current constants 12EDO A440 note 69. note 6000 cents MIDI note number 0. Normally use remap keyboard scale 12 notes per octave. scales 12 fewer notes octave, easier remap octaves using offsets provided scale table.","code":""},{"path":"/reference/keyboard_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Keyboard Map — keyboard_map","text":"","code":"eikosany <- cps_scale_table() print(eikosany_keyboard_map <- keyboard_map(eikosany)) #>      note_number key_name key_octave note_name ratio_frac degree octave #>   1:           0        C         -1     1x3x5          1      0      1 #>   2:           1       C#         -1    5x9x11      33/32      1      1 #>   3:           2        D         -1     1x7x9      21/20      2      1 #>   4:           3       D#         -1    1x3x11      11/10      3      1 #>   5:           4        E         -1     3x5x9        9/8      4      1 #>  ---                                                                    #> 124:         123       D#          9    1x3x11      11/10      3      7 #> 125:         124        E          9     3x5x9        9/8      4      7 #> 126:         125        F          9     1x5x7        7/6      5      7 #> 127:         126       F#          9    3x9x11      99/80      6      7 #> 128:         127        G          9    1x7x11      77/60      7      7 #>            freq     cents ref_keyname ref_octave ref_offsets #>   1:   32.70320  2400.000           C          2           0 #>   2:   33.72517  2453.273          C#          2         -47 #>   3:   34.33836  2484.467          C#          2         -16 #>   4:   35.97352  2565.004           D          2         -35 #>   5:   36.79110  2603.910           D          2           4 #>  ---                                                         #> 124: 2302.30497  9765.004           D          8         -35 #> 125: 2354.63009  9803.910           D          8           4 #> 126: 2441.83861  9866.871          D#          8         -33 #> 127: 2590.09310  9968.914           E          8         -31 #> 128: 2686.02247 10031.875           E          8          32  # 12-EDO for sanity check print(vanilla_keyboard_map <- keyboard_map(et_scale_table())) #>      note_number key_name key_octave note_name ratio_frac degree octave #>   1:           0        C         -1         C          1      0     -1 #>   2:           1       C#         -1        C#  1461/1379      1     -1 #>   3:           2        D         -1         D  1714/1527      2     -1 #>   4:           3       D#         -1        D#  1785/1501      3     -1 #>   5:           4        E         -1         E    635/504      4     -1 #>  ---                                                                    #> 124:         123       D#          9        D#  1785/1501      3      9 #> 125:         124        E          9         E    635/504      4      9 #> 126:         125        F          9         F  3249/2434      5      9 #> 127:         126       F#          9        F#   1393/985      6      9 #> 128:         127        G          9         G  2213/1477      7      9 #>              freq cents ref_keyname ref_octave ref_offsets #>   1:     8.175799     0           C          0           0 #>   2:     8.661957   100          C#          0           0 #>   3:     9.177024   200           D          0           0 #>   4:     9.722718   300          D#          0           0 #>   5:    10.300861   400           E          0           0 #>  ---                                                       #> 124:  9956.063479 12300          D#         10           0 #> 125: 10548.081821 12400           E         10           0 #> 126: 11175.303406 12500           F         10           0 #> 127: 11839.821527 12600          F#         10           0 #> 128: 12543.853951 12700           G         10           0  # check middle C setting print(   eikosany_keyboard_map_c3 <-     keyboard_map(cps_scale_table(), middle_c_octave = 3)) #>      note_number key_name key_octave note_name ratio_frac degree octave #>   1:           0        C         -2     1x3x5          1      0      0 #>   2:           1       C#         -2    5x9x11      33/32      1      0 #>   3:           2        D         -2     1x7x9      21/20      2      0 #>   4:           3       D#         -2    1x3x11      11/10      3      0 #>   5:           4        E         -2     3x5x9        9/8      4      0 #>  ---                                                                    #> 124:         123       D#          8    1x3x11      11/10      3      6 #> 125:         124        E          8     3x5x9        9/8      4      6 #> 126:         125        F          8     1x5x7        7/6      5      6 #> 127:         126       F#          8    3x9x11      99/80      6      6 #> 128:         127        G          8    1x7x11      77/60      7      6 #>            freq     cents ref_keyname ref_octave ref_offsets #>   1:   32.70320  2400.000           C          2           0 #>   2:   33.72517  2453.273          C#          2         -47 #>   3:   34.33836  2484.467          C#          2         -16 #>   4:   35.97352  2565.004           D          2         -35 #>   5:   36.79110  2603.910           D          2           4 #>  ---                                                         #> 124: 2302.30497  9765.004           D          8         -35 #> 125: 2354.63009  9803.910           D          8           4 #> 126: 2441.83861  9866.871          D#          8         -33 #> 127: 2590.09310  9968.914           E          8         -31 #> 128: 2686.02247 10031.875           E          8          32"},{"path":"/reference/ps_scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Product Set Scale Table — ps_scale_table","title":"Create Product Set Scale Table — ps_scale_table","text":"Creates scale table product set definition","code":""},{"path":"/reference/ps_scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Product Set Scale Table — ps_scale_table","text":"","code":"ps_scale_table(   ps_def = c(\"1x3x5\", \"5x9x11\", \"1x7x9\", \"1x3x11\", \"3x5x9\", \"1x5x7\", \"3x9x11\", \"1x7x11\",     \"5x7x9\", \"3x5x11\", \"1x3x7\", \"7x9x11\", \"1x5x9\", \"3x7x9\", \"5x7x11\", \"1x9x11\", \"3x5x7\",     \"1x3x9\", \"1x5x11\", \"3x7x11\") )"},{"path":"/reference/ps_scale_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Product Set Scale Table — ps_scale_table","text":"ps_def product set scale definition. character vector products. product set number integers separated lower-case \"x\". example, ps_def 1-3-5-7 Hexany c(\"1x3\", \"1x5\", \"1x7\", \"3x5\", \"3x7\", \"5x7\") default ps_def 1-3-5-7-9-11 Eikosany.","code":""},{"path":"/reference/ps_scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Product Set Scale Table — ps_scale_table","text":"data.table eight columns: note_name: given product set definition, re-ordered degrees resulting scale (character) ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character) ratio_cents: ratio cents (hundredths semitone) interval_cents: interval note previous note degree: scale degree zero (number notes) - 1 key_12EDO: note name closest 12EDO note. Note synthesizers allow returning relative C next octave , offset B note. offset_cents: offset cents key_12EDO","code":""},{"path":"/reference/ps_scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Product Set Scale Table — ps_scale_table","text":"","code":"# the default yields the 1-3-5-7-9-11 Eikosany print(eikosany <- ps_scale_table()) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:     1x3x5 1.000000          1     0.00000             NA      0         C #>  2:    5x9x11 1.031250      33/32    53.27294       53.27294      1        C# #>  3:     1x7x9 1.050000      21/20    84.46719       31.19425      2        C# #>  4:    1x3x11 1.100000      11/10   165.00423       80.53704      3         D #>  5:     3x5x9 1.125000        9/8   203.91000       38.90577      4         D #>  6:     1x5x7 1.166667        7/6   266.87091       62.96090      5        D# #>  7:    3x9x11 1.237500      99/80   368.91423      102.04332      6         E #>  8:    1x7x11 1.283333      77/60   431.87513       62.96090      7         E #>  9:     5x7x9 1.312500      21/16   470.78091       38.90577      8         F #> 10:    3x5x11 1.375000       11/8   551.31794       80.53704      9        F# #> 11:     1x3x7 1.400000        7/5   582.51219       31.19425     10        F# #> 12:    7x9x11 1.443750    231/160   635.78514       53.27294     11        F# #> 13:     1x5x9 1.500000        3/2   701.95500       66.16987     12         G #> 14:     3x7x9 1.575000      63/40   786.42219       84.46719     13        G# #> 15:    5x7x11 1.604167      77/48   818.18885       31.76665     14        G# #> 16:    1x9x11 1.650000      33/20   866.95923       48.77038     15         A #> 17:     3x5x7 1.750000        7/4   968.82591      101.86668     16        A# #> 18:     1x3x9 1.800000        9/5  1017.59629       48.77038     17        A# #> 19:    1x5x11 1.833333       11/6  1049.36294       31.76665     18        A# #> 20:    3x7x11 1.925000      77/40  1133.83013       84.46719     19         B #> 21:    1x3x5' 2.000000          2  1200.00000       66.16987     20         B #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>     offset_cents #>  1:     0.000000 #>  2:   -46.727057 #>  3:   -15.532807 #>  4:   -34.995772 #>  5:     3.910002 #>  6:   -33.129094 #>  7:   -31.085770 #>  8:    31.875134 #>  9:   -29.219093 #> 10:   -48.682058 #> 11:   -17.487807 #> 12:    35.785136 #> 13:     1.955001 #> 14:   -13.577806 #> 15:    18.188848 #> 16:   -33.040771 #> 17:   -31.174094 #> 18:    17.596288 #> 19:    49.362941 #> 20:    33.830135 #> 21:   100.000000 #>     offset_cents  # Kraig Grady's Eikosany as two complementary extended Dekanies print(grady_a <- ps_scale_table(c(   \"1x3x11\",   \"1x9\",   \"3x9x11\",   \"1x7x11\",   \"1x3x7\",   \"7x9x11\",   \"3x7x9\",   \"1x9x11\",   \"1x3x9\",   \"1x7\",   \"3x7x11\",   \"1x7x9\" ))) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:       1x7 1.000000          1     0.00000             NA      0         C #>  2:    3x7x11 1.031250      33/32    53.27294       53.27294      1        C# #>  3:     1x7x9 1.125000        9/8   203.91000      150.63706      2         D #>  4:    1x3x11 1.178571      33/28   284.44704       80.53704      3        D# #>  5:       1x9 1.285714        9/7   435.08410      150.63706      4         E #>  6:    3x9x11 1.325893    297/224   488.35704       53.27294      5         F #>  7:    1x7x11 1.375000       11/8   551.31794       62.96090      6        F# #>  8:     1x3x7 1.500000        3/2   701.95500      150.63706      7         G #>  9:    7x9x11 1.546875      99/64   755.22794       53.27294      8        G# #> 10:     3x7x9 1.687500      27/16   905.86500      150.63706      9         A #> 11:    1x9x11 1.767857      99/56   986.40204       80.53704     10        A# #> 12:     1x3x9 1.928571      27/14  1137.03910      150.63706     11         B #> 13:      1x7' 2.000000          2  1200.00000       62.96090     12         B #>     offset_cents #>  1:     0.000000 #>  2:   -46.727057 #>  3:     3.910002 #>  4:   -15.552963 #>  5:    35.084095 #>  6:   -11.642962 #>  7:   -48.682058 #>  8:     1.955001 #>  9:   -44.772056 #> 10:     5.865003 #> 11:   -13.597962 #> 12:    37.039096 #> 13:   100.000000 print(grady_b <- ps_scale_table(c(   \"3x5x11\",   \"1x5x9\",   \"3x5x9x11\",   \"5x7x11\",   \"3x5x7\",   \"1x5x11\",   \"1x3x5\",   \"5x9x11\",   \"3x5x9\",   \"1x5x7\",   \"3x5x7x11\",   \"5x7x9\" ))) #>     note_name    ratio ratio_frac ratio_cents interval_cents degree key_12EDO #>  1:     1x3x5 1.000000          1     0.00000             NA      0         C #>  2:    5x9x11 1.031250      33/32    53.27294       53.27294      1        C# #>  3:     3x5x9 1.125000        9/8   203.91000      150.63706      2         D #>  4:     1x5x7 1.166667        7/6   266.87091       62.96090      3        D# #>  5:  3x5x7x11 1.203125      77/64   320.14385       53.27294      4        D# #>  6:     5x7x9 1.312500      21/16   470.78091      150.63706      5         F #>  7:    3x5x11 1.375000       11/8   551.31794       80.53704      6        F# #>  8:     1x5x9 1.500000        3/2   701.95500      150.63706      7         G #>  9:  3x5x9x11 1.546875      99/64   755.22794       53.27294      8        G# #> 10:    5x7x11 1.604167      77/48   818.18885       62.96090      9        G# #> 11:     3x5x7 1.750000        7/4   968.82591      150.63706     10        A# #> 12:    1x5x11 1.833333       11/6  1049.36294       80.53704     11        A# #> 13:    1x3x5' 2.000000          2  1200.00000      150.63706     12         B #>     offset_cents #>  1:     0.000000 #>  2:   -46.727057 #>  3:     3.910002 #>  4:   -33.129094 #>  5:    20.143849 #>  6:   -29.219093 #>  7:   -48.682058 #>  8:     1.955001 #>  9:   -44.772056 #> 10:    18.188848 #> 11:   -31.174094 #> 12:    49.362941 #> 13:   100.000000"},{"path":"/reference/scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Scale Table — scale_table","title":"Create Scale Table — scale_table","text":"Creates scale table combination product set definition","code":""},{"path":"/reference/scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Scale Table — scale_table","text":"","code":"scale_table(harmonics = c(1, 3, 5, 7, 9, 11), choose = 3)"},{"path":"/reference/scale_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Scale Table — scale_table","text":"harmonics vector harmonics use - defaults first six odd numbers, harmonics define 1-3-5-7-9-11 Eikosany. choose number harmonics choose combination - defaults 3, number harmonics combination Eikosany.","code":""},{"path":"/reference/scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Scale Table — scale_table","text":"data.table ten columns: product: product harmonics defines note (character) ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character) ratio_cents: ratio cents (hundredths semitone) degree: scale degree zero (number notes) - 1","code":""},{"path":"/reference/scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Scale Table — scale_table","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany print(eikosany <- scale_table())  # the 1-7-9-11-13 Dekany dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 print(dekany_1_7_9_11_13 <- scale_table(dekany_harmonics, dekany_choose))  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left, # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 print(any_35 <- scale_table(harmonics_35, choose_35))  }"}]
