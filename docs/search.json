[{"path":"/articles/constructing-the-eikosany.html","id":"computing-combination-product-set-scales","dir":"Articles","previous_headings":"","what":"Computing Combination Product Set scales","title":"Constructing the Eikosany","text":"","code":"# the defaults yield the 1-3-5-7-9-11 Eikosany eikosany <- scale_table() knitr::kable(eikosany[[\"scale_table\"]], digits = 2) # the 1-3-5-7 Hexany hexany_harmonics <- c(1, 3, 5, 7) hexany_choose <- 2 hexany_1_3_5_7 <-   scale_table(hexany_harmonics, hexany_choose) knitr::kable(hexany_1_3_5_7[[\"scale_table\"]], digits = 2) knitr::kable(hexany_1_3_5_7[[\"interval_matrix\"]], digits = 2) # the 1-7-9-11-13 Dekany dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 dekany_1_7_9_11_13 <-   scale_table(dekany_harmonics, dekany_choose) knitr::kable(dekany_1_7_9_11_13[[\"scale_table\"]], digits = 2) knitr::kable(dekany_1_7_9_11_13[[\"interval_matrix\"]]) # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left. # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 any_35 <-   scale_table(harmonics_35, choose_35) knitr::kable(any_35[[\"scale_table\"]], digits = 2)"},{"path":"/articles/constructing-the-eikosany.html","id":"computing-chords---the-tetrads-of-the-1-3-5-7-9-11-eikosany","dir":"Articles","previous_headings":"","what":"Computing chords - the tetrads of the 1-3-5-7-9-11 Eikosany","title":"Constructing the Eikosany","text":"","code":"# the defaults yield the 1-3-5-7-9-11 Eikosany eikosany_scale <- scale_table()[[\"scale_table\"]] knitr::kable(eikosany_scale, digits = 2) # the defaults yield the tetrads of the 1-3-5-7-9-11 Eikosany eikosany_chords <- chord_table(eikosany_scale) knitr::kable(eikosany_chords, digits = 2)"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"M. Edward (Ed) Borasky. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Borasky M (2022). eikosany: Algorithmic Composition Erv Wilson's Combination Product Sets. https://algocompsynth.github.io/eikosany/, https://github.com/AlgoCompSynth/eikosany.","code":"@Manual{,   title = {eikosany: Algorithmic Composition With Erv Wilson's Combination Product Sets},   author = {M. Edward (Ed) Borasky},   year = {2022},   note = {https://algocompsynth.github.io/eikosany/, https://github.com/AlgoCompSynth/eikosany}, }"},{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"eikosany R package tools algorithmic composition Erv Wilson’s Combination Product Sets (Narushima 2019, chap. 6). ’s meant complement microtonal composition tools, replace . name: Eikosany 20-note scale derived Erv Wilson first six odd harmonics harmonic series - 1, 3, 5, 7, 9 11.","code":""},{"path":"/index.html","id":"other-tools","dir":"","previous_headings":"","what":"Other tools","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"Scala. Note: Scala multi-paradigm programming language runs Java Virtual Machine. specialized tool working musical scales. Wilsonic. free app runs iOS devices. don’t iOS devices ’ve never used . ODDSound MTS-ESP. plugin digital audio workstations (DAWs) facilitates production microtonal music. copy ’re making microtonal electronic music, . Eikosany scales Erv Wilson developed ship MTS-ESP, don’t really need R package compose . Sevish’s Scale Workshop. web-based tool working musical scales. Entonal Studio. Entonal Studio user interface package microtonal composition. can operate standalone application, plugin host plugin. copy Entonal Studio recommend highly.","code":""},{"path":"/index.html","id":"some-history","dir":"","previous_headings":"","what":"Some history","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"February 4, 2001, composer Iannis Xenakis passed away. ’ve fan experimental music, especially musique concrète, algorithmically composed music, microtonal music, avant-garde genres since undergraduate. Xenakis one major figures algorithmic composition. Reading first edition Tuning, Timbre, Spectrum, Scale (Sethares 1998) rekindled appreciation microtonal music Harry Partch. , armed copies Sethares (1998), Formalized Music (Xenakis 1992), Genesis Music (Partch 1979), embarked path led Harry Met Iannis (Borasky 2021). Harry Met Iannis premiered microtonal music festival El Paso, Texas late October, 2001. Bandcamp version essentially identical version; source code GitHub https://github.com/AlgoCompSynth/-harry-met-iannis. festival, met number composers working microtonal just intonation, one name kept coming : Erv Wilson. Wilson theoretician developed keyboards, scales tuning systems several composers using time, still using today. Terumi Narushima’s Microtonality Tuning Systems Erv Wilson (Narushima 2019) comprehensive documentation Wilson’s work basis code package.","code":""},{"path":"/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"two main motivations: ’s old saying really want learn something, teach computer . case Erv Wilson’s musical constructs, teasing construction processes others’ writings subject non-trivial task. example, much Wilson’s work consists multi-dimensional graph structures drawn flat paper. build physical three-dimensional models , can’t even rendered three dimension. graph theory operations generated musical ways traverse obvious. 20th anniversary Xenakis’ passing Harry Met Iannis occured second year virtual isolation COVID-19. 2021, acquired two synthesizers capable mapping keyboards arbitrary microtonal scales: Ashun Sound Machines Hydrasynth Desktop, Korg Minilogue XD. Hydrasynth ships tuning tables many Erv Wilson’s scales already firmware. Minilogue XD, user can load six custom scales software librarian program. ’m keyboard player, even , remapping process scales leaves middle C musician normally expect find . notes somewhere else. need translator music want write doesn’t involve lot trial error fumbling around remapped synthesizer -screen keyboard. CPS scales aimed harmonic musical structures like chords, finding remapped keyboard tedious error-prone. Music composed using Wilson’s musical structures mostly played instruments custom-built . keyboards designed Wilson’s microtonal music; indeed, Wilson designed microtonal keyboards (Narushima 2019, chap. 2). ’re quite expensive , like instruments, custom-built. need tools work .","code":""},{"path":"/index.html","id":"milestones","dir":"","previous_headings":"","what":"Milestones","title":"Algorithmic Composition With Erv Wilson's Combination Product Sets","text":"ultimate goal package compose music using Combination Product Set (CPS) scales. three milestones path: v0.5.0: synthesizing tones CPS scale WAV files can used sample-based workflow, v0.7.5: creating MIDI files can imported DAW editing music production, v0.9.0: tools creating traversing diagrams CPS scales chords, using DiagrammeR (Iannone 2022).","code":""},{"path":[]},{"path":"/reference/chord_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Chord Table — chord_table","title":"Create Chord Table — chord_table","text":"Creates chord table","code":""},{"path":"/reference/chord_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Chord Table — chord_table","text":"","code":"chord_table(scale_table, harmonics = c(1, 3, 5, 7, 9, 11), choose = 4)"},{"path":"/reference/chord_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Chord Table — chord_table","text":"scale_table scale table use note number name lookup harmonics vector harmonics use - defaults first six odd numbers, harmonics define 1-3-5-7-9-11 eikosany. choose number harmonics choose chord - defaults 4, compute tetrads eikosany.","code":""},{"path":"/reference/chord_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Chord Table — chord_table","text":"data.table five columns: chord_label: chord expressed colon-separated harmonics harmonic_note_numbers: harmonic chord expressed colon-separated MIDI note numbers harmonic_note_names: harmonic chord expressed colon-separated note names subharmonic_note_numbers: subharmonic chord expressed colon-separated MIDI note numbers subharmonic_note_names: subharmonic chord expressed colon-separated note names","code":""},{"path":"/reference/chord_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Chord Table — chord_table","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany eikosany_scale <- scale_table()[[\"scale_table\"]] print(eikosany_scale)  # the defaults yield the tetrads of the 1-3-5-7-9-11 Eikosany eikosany_chords <- chord_table(eikosany_scale) print(eikosany_chords) }"},{"path":"/reference/scale_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Scale Table and Interval Matrix — scale_table","title":"Create Scale Table and Interval Matrix — scale_table","text":"Creates scale table interval matrix combination product set definition","code":""},{"path":"/reference/scale_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Scale Table and Interval Matrix — scale_table","text":"","code":"scale_table(   harmonics = c(1, 3, 5, 7, 9, 11),   choose = 3,   base_frequency = 440/(2^(9/12)),   base_note_number = 60 )"},{"path":"/reference/scale_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Scale Table and Interval Matrix — scale_table","text":"harmonics vector harmonics use - defaults first six odd numbers, harmonics define 1-3-5-7-9-11 Eikosany. choose number harmonics choose combination - defaults 3, number harmonics combination Eikosany. base_frequency base frequency Hz - defaults 440 / (2 ^ (9 / 12)), frequency middle C 12-tone equal tempered keyboard = 440 Hz. base_note_number MIDI note number corresponding base frequency - defaults 60, MIDI note number middle C.","code":""},{"path":"/reference/scale_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Scale Table and Interval Matrix — scale_table","text":"list two items: scale_table: scale table interval_matrix: interval matrix scale table contains ten columns: note_label: product defines note ratio: ratio defines note, number 1 2 ratio_frac: ratio vulgar fraction (character) cents: ratio cents (hundredths semitone) frequency: frequency note Hz base_12EDO: synthesizers can retuned via pitch bend, base note name 12EDO aka 12 tone equal temperament offset_cents: offset cents base 12EDO pitch interval: interval cents note preceding note midi_note_number: MIDI note number note note_name: note name, middle C defined \"C  4\". interval matrix matrix intervals notes, expressed ratios. Column 1 ratios notes first one, column 2 ratios notes second one, etc.","code":""},{"path":"/reference/scale_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Scale Table and Interval Matrix — scale_table","text":"","code":"if (FALSE) {  # the defaults yield the 1-3-5-7-9-11 Eikosany eikosany <- scale_table() print(eikosany[[\"scale_table\"]]) print(eikosany[[\"interval_matrix\"]])  # the 1-7-9-11-13 Dekany dekany_harmonics <- c(1, 7, 9, 11, 13) dekany_choose <- 2 dekany_1_7_9_11_13 <-   scale_table(dekany_harmonics, dekany_choose) print(dekany_1_7_9_11_13[[\"scale_table\"]]) print(dekany_1_7_9_11_13[[\"interval_matrix\"]])  # We might want to print out sheet music for a conventional keyboard # player, since the synthesizer is mapping MIDI note numbers to pitches. # We assume at least a 37-key synthesizer with middle C on the left. # so the largest CPS scale we can play is a 35-note \"35-any\", made from # seven harmonics taken three at a time. harmonics_35 <- c(1, 3, 5, 7, 9, 11, 13) choose_35 <- 3 any_35 <-   scale_table(harmonics_35, choose_35) print(any_35[[\"scale_table\"]]) print(any_35[[\"interval_matrix\"]])  }"}]
